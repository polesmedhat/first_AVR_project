
vote_assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000036bc  00003750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  0000376e  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  00003770  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b69  00000000  00000000  00005d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000068f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000acac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ae2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b97c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <main>
      8a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e7       	ldi	r22, 0x75	; 117
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <APP_Init>:

static uint8 max(uint8 x,uint8 y);
static uint8 APP_max();
static void APP_winnercreen();

void APP_Init(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
     ca6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_init>
}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <APP_mainScreen>:

void APP_mainScreen(){
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	a0 97       	sbiw	r28, 0x20	; 32
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     cc4:	0e 94 cd 1a 	call	0x359a	; 0x359a <LCD_clearScreen>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 ea       	ldi	r26, 0xA0	; 160
     cce:	b0 e4       	ldi	r27, 0x40	; 64
     cd0:	89 8f       	std	Y+25, r24	; 0x19
     cd2:	9a 8f       	std	Y+26, r25	; 0x1a
     cd4:	ab 8f       	std	Y+27, r26	; 0x1b
     cd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd8:	69 8d       	ldd	r22, Y+25	; 0x19
     cda:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cde:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	4a e7       	ldi	r20, 0x7A	; 122
     ce6:	55 e4       	ldi	r21, 0x45	; 69
     ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	8d 8b       	std	Y+21, r24	; 0x15
     cf2:	9e 8b       	std	Y+22, r25	; 0x16
     cf4:	af 8b       	std	Y+23, r26	; 0x17
     cf6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cf8:	6d 89       	ldd	r22, Y+21	; 0x15
     cfa:	7e 89       	ldd	r23, Y+22	; 0x16
     cfc:	8f 89       	ldd	r24, Y+23	; 0x17
     cfe:	98 8d       	ldd	r25, Y+24	; 0x18
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e8       	ldi	r20, 0x80	; 128
     d06:	5f e3       	ldi	r21, 0x3F	; 63
     d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d0c:	88 23       	and	r24, r24
     d0e:	2c f4       	brge	.+10     	; 0xd1a <APP_mainScreen+0x6a>
		__ticks = 1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9c 8b       	std	Y+20, r25	; 0x14
     d16:	8b 8b       	std	Y+19, r24	; 0x13
     d18:	3f c0       	rjmp	.+126    	; 0xd98 <APP_mainScreen+0xe8>
	else if (__tmp > 65535)
     d1a:	6d 89       	ldd	r22, Y+21	; 0x15
     d1c:	7e 89       	ldd	r23, Y+22	; 0x16
     d1e:	8f 89       	ldd	r24, Y+23	; 0x17
     d20:	98 8d       	ldd	r25, Y+24	; 0x18
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	3f ef       	ldi	r19, 0xFF	; 255
     d26:	4f e7       	ldi	r20, 0x7F	; 127
     d28:	57 e4       	ldi	r21, 0x47	; 71
     d2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d2e:	18 16       	cp	r1, r24
     d30:	4c f5       	brge	.+82     	; 0xd84 <APP_mainScreen+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d32:	69 8d       	ldd	r22, Y+25	; 0x19
     d34:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d36:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d38:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e2       	ldi	r20, 0x20	; 32
     d40:	51 e4       	ldi	r21, 0x41	; 65
     d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	9c 8b       	std	Y+20, r25	; 0x14
     d58:	8b 8b       	std	Y+19, r24	; 0x13
     d5a:	0f c0       	rjmp	.+30     	; 0xd7a <APP_mainScreen+0xca>
     d5c:	80 e9       	ldi	r24, 0x90	; 144
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	9a 8b       	std	Y+18, r25	; 0x12
     d62:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d64:	89 89       	ldd	r24, Y+17	; 0x11
     d66:	9a 89       	ldd	r25, Y+18	; 0x12
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <APP_mainScreen+0xb8>
     d6c:	9a 8b       	std	Y+18, r25	; 0x12
     d6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d70:	8b 89       	ldd	r24, Y+19	; 0x13
     d72:	9c 89       	ldd	r25, Y+20	; 0x14
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	9c 8b       	std	Y+20, r25	; 0x14
     d78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7a:	8b 89       	ldd	r24, Y+19	; 0x13
     d7c:	9c 89       	ldd	r25, Y+20	; 0x14
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	69 f7       	brne	.-38     	; 0xd5c <APP_mainScreen+0xac>
     d82:	14 c0       	rjmp	.+40     	; 0xdac <APP_mainScreen+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d84:	6d 89       	ldd	r22, Y+21	; 0x15
     d86:	7e 89       	ldd	r23, Y+22	; 0x16
     d88:	8f 89       	ldd	r24, Y+23	; 0x17
     d8a:	98 8d       	ldd	r25, Y+24	; 0x18
     d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	9c 8b       	std	Y+20, r25	; 0x14
     d96:	8b 8b       	std	Y+19, r24	; 0x13
     d98:	8b 89       	ldd	r24, Y+19	; 0x13
     d9a:	9c 89       	ldd	r25, Y+20	; 0x14
     d9c:	98 8b       	std	Y+16, r25	; 0x10
     d9e:	8f 87       	std	Y+15, r24	; 0x0f
     da0:	8f 85       	ldd	r24, Y+15	; 0x0f
     da2:	98 89       	ldd	r25, Y+16	; 0x10
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <APP_mainScreen+0xf4>
     da8:	98 8b       	std	Y+16, r25	; 0x10
     daa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(SHORT_DELAY);
	LCD_displayString("A=");
     dac:	80 e6       	ldi	r24, 0x60	; 96
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 26 1a 	call	0x344c	; 0x344c <LCD_displayString>
	LCD_integerToString(counter[0]);
     db4:	80 91 7e 00 	lds	r24, 0x007E
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 4f 1a 	call	0x349e	; 0x349e <LCD_integerToString>

	LCD_moveCursor(0,8);
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	68 e0       	ldi	r22, 0x08	; 8
     dc4:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_moveCursor>
	LCD_displayString("B=");
     dc8:	83 e6       	ldi	r24, 0x63	; 99
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 26 1a 	call	0x344c	; 0x344c <LCD_displayString>
	LCD_integerToString(counter[1]);
     dd0:	80 91 7f 00 	lds	r24, 0x007F
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 4f 1a 	call	0x349e	; 0x349e <LCD_integerToString>

	LCD_moveCursor(1,0);
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_moveCursor>
	LCD_displayString("C=");
     de4:	86 e6       	ldi	r24, 0x66	; 102
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 26 1a 	call	0x344c	; 0x344c <LCD_displayString>
	LCD_integerToString(counter[2]);
     dec:	80 91 80 00 	lds	r24, 0x0080
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 4f 1a 	call	0x349e	; 0x349e <LCD_integerToString>

	LCD_moveCursor(1,8);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	68 e0       	ldi	r22, 0x08	; 8
     dfc:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_moveCursor>
	LCD_displayString("D=");
     e00:	89 e6       	ldi	r24, 0x69	; 105
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 26 1a 	call	0x344c	; 0x344c <LCD_displayString>
	LCD_integerToString(counter[3]);
     e08:	80 91 81 00 	lds	r24, 0x0081
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 4f 1a 	call	0x349e	; 0x349e <LCD_integerToString>

	uint8 input = KEYPAD_getPressedKey();
     e14:	0e 94 1b 0c 	call	0x1836	; 0x1836 <KEYPAD_getPressedKey>
     e18:	8e 8f       	std	Y+30, r24	; 0x1e
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	aa ef       	ldi	r26, 0xFA	; 250
     e20:	b3 e4       	ldi	r27, 0x43	; 67
     e22:	8b 87       	std	Y+11, r24	; 0x0b
     e24:	9c 87       	std	Y+12, r25	; 0x0c
     e26:	ad 87       	std	Y+13, r26	; 0x0d
     e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e30:	9e 85       	ldd	r25, Y+14	; 0x0e
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	4a e7       	ldi	r20, 0x7A	; 122
     e38:	55 e4       	ldi	r21, 0x45	; 69
     e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	8f 83       	std	Y+7, r24	; 0x07
     e44:	98 87       	std	Y+8, r25	; 0x08
     e46:	a9 87       	std	Y+9, r26	; 0x09
     e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e4a:	6f 81       	ldd	r22, Y+7	; 0x07
     e4c:	78 85       	ldd	r23, Y+8	; 0x08
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	9a 85       	ldd	r25, Y+10	; 0x0a
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e8       	ldi	r20, 0x80	; 128
     e58:	5f e3       	ldi	r21, 0x3F	; 63
     e5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e5e:	88 23       	and	r24, r24
     e60:	2c f4       	brge	.+10     	; 0xe6c <APP_mainScreen+0x1bc>
		__ticks = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9e 83       	std	Y+6, r25	; 0x06
     e68:	8d 83       	std	Y+5, r24	; 0x05
     e6a:	3f c0       	rjmp	.+126    	; 0xeea <APP_mainScreen+0x23a>
	else if (__tmp > 65535)
     e6c:	6f 81       	ldd	r22, Y+7	; 0x07
     e6e:	78 85       	ldd	r23, Y+8	; 0x08
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	3f ef       	ldi	r19, 0xFF	; 255
     e78:	4f e7       	ldi	r20, 0x7F	; 127
     e7a:	57 e4       	ldi	r21, 0x47	; 71
     e7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e80:	18 16       	cp	r1, r24
     e82:	4c f5       	brge	.+82     	; 0xed6 <APP_mainScreen+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e84:	6b 85       	ldd	r22, Y+11	; 0x0b
     e86:	7c 85       	ldd	r23, Y+12	; 0x0c
     e88:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e2       	ldi	r20, 0x20	; 32
     e92:	51 e4       	ldi	r21, 0x41	; 65
     e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	bc 01       	movw	r22, r24
     e9e:	cd 01       	movw	r24, r26
     ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
     eac:	0f c0       	rjmp	.+30     	; 0xecc <APP_mainScreen+0x21c>
     eae:	80 e9       	ldi	r24, 0x90	; 144
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <APP_mainScreen+0x20a>
     ebe:	9c 83       	std	Y+4, r25	; 0x04
     ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	69 f7       	brne	.-38     	; 0xeae <APP_mainScreen+0x1fe>
     ed4:	14 c0       	rjmp	.+40     	; 0xefe <APP_mainScreen+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed6:	6f 81       	ldd	r22, Y+7	; 0x07
     ed8:	78 85       	ldd	r23, Y+8	; 0x08
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <APP_mainScreen+0x246>
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(KEYPAD_DELAY);

	switch (input) {
     efe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	38 a3       	std	Y+32, r19	; 0x20
     f06:	2f 8f       	std	Y+31, r18	; 0x1f
     f08:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f0a:	98 a1       	ldd	r25, Y+32	; 0x20
     f0c:	88 30       	cpi	r24, 0x08	; 8
     f0e:	91 05       	cpc	r25, r1
     f10:	39 f1       	breq	.+78     	; 0xf60 <APP_mainScreen+0x2b0>
     f12:	2f 8d       	ldd	r18, Y+31	; 0x1f
     f14:	38 a1       	ldd	r19, Y+32	; 0x20
     f16:	29 30       	cpi	r18, 0x09	; 9
     f18:	31 05       	cpc	r19, r1
     f1a:	64 f4       	brge	.+24     	; 0xf34 <APP_mainScreen+0x284>
     f1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f1e:	98 a1       	ldd	r25, Y+32	; 0x20
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <APP_mainScreen+0x278>
     f26:	3e c0       	rjmp	.+124    	; 0xfa4 <APP_mainScreen+0x2f4>
     f28:	2f 8d       	ldd	r18, Y+31	; 0x1f
     f2a:	38 a1       	ldd	r19, Y+32	; 0x20
     f2c:	24 30       	cpi	r18, 0x04	; 4
     f2e:	31 05       	cpc	r19, r1
     f30:	89 f0       	breq	.+34     	; 0xf54 <APP_mainScreen+0x2a4>
     f32:	3a c0       	rjmp	.+116    	; 0xfa8 <APP_mainScreen+0x2f8>
     f34:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f36:	98 a1       	ldd	r25, Y+32	; 0x20
     f38:	8e 30       	cpi	r24, 0x0E	; 14
     f3a:	91 05       	cpc	r25, r1
     f3c:	19 f1       	breq	.+70     	; 0xf84 <APP_mainScreen+0x2d4>
     f3e:	2f 8d       	ldd	r18, Y+31	; 0x1f
     f40:	38 a1       	ldd	r19, Y+32	; 0x20
     f42:	20 31       	cpi	r18, 0x10	; 16
     f44:	31 05       	cpc	r19, r1
     f46:	c1 f0       	breq	.+48     	; 0xf78 <APP_mainScreen+0x2c8>
     f48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f4a:	98 a1       	ldd	r25, Y+32	; 0x20
     f4c:	8c 30       	cpi	r24, 0x0C	; 12
     f4e:	91 05       	cpc	r25, r1
     f50:	69 f0       	breq	.+26     	; 0xf6c <APP_mainScreen+0x2bc>
     f52:	2a c0       	rjmp	.+84     	; 0xfa8 <APP_mainScreen+0x2f8>
		case candidateA:
			counter[0]++;
     f54:	80 91 7e 00 	lds	r24, 0x007E
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	80 93 7e 00 	sts	0x007E, r24
     f5e:	24 c0       	rjmp	.+72     	; 0xfa8 <APP_mainScreen+0x2f8>
			break;
		case candidateB:
			counter[1]++;
     f60:	80 91 7f 00 	lds	r24, 0x007F
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	80 93 7f 00 	sts	0x007F, r24
     f6a:	1e c0       	rjmp	.+60     	; 0xfa8 <APP_mainScreen+0x2f8>
			break;
		case candidateC:
			counter[2]++;
     f6c:	80 91 80 00 	lds	r24, 0x0080
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	80 93 80 00 	sts	0x0080, r24
     f76:	18 c0       	rjmp	.+48     	; 0xfa8 <APP_mainScreen+0x2f8>
			break;
		case candidateD:
			counter[3]++;
     f78:	80 91 81 00 	lds	r24, 0x0081
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 93 81 00 	sts	0x0081, r24
     f82:	12 c0       	rjmp	.+36     	; 0xfa8 <APP_mainScreen+0x2f8>
			break;
		case reset:
			for (uint8 var = 0; var < 4; ++var) {
     f84:	1d 8e       	std	Y+29, r1	; 0x1d
     f86:	0a c0       	rjmp	.+20     	; 0xf9c <APP_mainScreen+0x2ec>
				counter[var]=0;
     f88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	fc 01       	movw	r30, r24
     f90:	e2 58       	subi	r30, 0x82	; 130
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	10 82       	st	Z, r1
			break;
		case candidateD:
			counter[3]++;
			break;
		case reset:
			for (uint8 var = 0; var < 4; ++var) {
     f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	8d 8f       	std	Y+29, r24	; 0x1d
     f9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f9e:	84 30       	cpi	r24, 0x04	; 4
     fa0:	98 f3       	brcs	.-26     	; 0xf88 <APP_mainScreen+0x2d8>
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <APP_mainScreen+0x2f8>
				counter[var]=0;
			}
			break;
		case winner:
			APP_winnercreen();
     fa4:	0e 94 df 07 	call	0xfbe	; 0xfbe <APP_winnercreen>
			break;
		default:
			break;
	}
	APP_mainScreen();
     fa8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <APP_mainScreen>
}
     fac:	a0 96       	adiw	r28, 0x20	; 32
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <APP_winnercreen>:

static void APP_winnercreen(){
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	6f 97       	sbiw	r28, 0x1f	; 31
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
	uint8 maxcounter =APP_max();
     fd2:	0e 94 18 09 	call	0x1230	; 0x1230 <APP_max>
     fd6:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 flag=0;
     fd8:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_clearScreen();
     fda:	0e 94 cd 1a 	call	0x359a	; 0x359a <LCD_clearScreen>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 ea       	ldi	r26, 0xA0	; 160
     fe4:	b0 e4       	ldi	r27, 0x40	; 64
     fe6:	89 8f       	std	Y+25, r24	; 0x19
     fe8:	9a 8f       	std	Y+26, r25	; 0x1a
     fea:	ab 8f       	std	Y+27, r26	; 0x1b
     fec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fee:	69 8d       	ldd	r22, Y+25	; 0x19
     ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	4a e7       	ldi	r20, 0x7A	; 122
     ffc:	55 e4       	ldi	r21, 0x45	; 69
     ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	8d 8b       	std	Y+21, r24	; 0x15
    1008:	9e 8b       	std	Y+22, r25	; 0x16
    100a:	af 8b       	std	Y+23, r26	; 0x17
    100c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    100e:	6d 89       	ldd	r22, Y+21	; 0x15
    1010:	7e 89       	ldd	r23, Y+22	; 0x16
    1012:	8f 89       	ldd	r24, Y+23	; 0x17
    1014:	98 8d       	ldd	r25, Y+24	; 0x18
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e8       	ldi	r20, 0x80	; 128
    101c:	5f e3       	ldi	r21, 0x3F	; 63
    101e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1022:	88 23       	and	r24, r24
    1024:	2c f4       	brge	.+10     	; 0x1030 <APP_winnercreen+0x72>
		__ticks = 1;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9c 8b       	std	Y+20, r25	; 0x14
    102c:	8b 8b       	std	Y+19, r24	; 0x13
    102e:	3f c0       	rjmp	.+126    	; 0x10ae <APP_winnercreen+0xf0>
	else if (__tmp > 65535)
    1030:	6d 89       	ldd	r22, Y+21	; 0x15
    1032:	7e 89       	ldd	r23, Y+22	; 0x16
    1034:	8f 89       	ldd	r24, Y+23	; 0x17
    1036:	98 8d       	ldd	r25, Y+24	; 0x18
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	4f e7       	ldi	r20, 0x7F	; 127
    103e:	57 e4       	ldi	r21, 0x47	; 71
    1040:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1044:	18 16       	cp	r1, r24
    1046:	4c f5       	brge	.+82     	; 0x109a <APP_winnercreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1048:	69 8d       	ldd	r22, Y+25	; 0x19
    104a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    104c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    104e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e2       	ldi	r20, 0x20	; 32
    1056:	51 e4       	ldi	r21, 0x41	; 65
    1058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	9c 8b       	std	Y+20, r25	; 0x14
    106e:	8b 8b       	std	Y+19, r24	; 0x13
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <APP_winnercreen+0xd2>
    1072:	80 e9       	ldi	r24, 0x90	; 144
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	9a 8b       	std	Y+18, r25	; 0x12
    1078:	89 8b       	std	Y+17, r24	; 0x11
    107a:	89 89       	ldd	r24, Y+17	; 0x11
    107c:	9a 89       	ldd	r25, Y+18	; 0x12
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <APP_winnercreen+0xc0>
    1082:	9a 8b       	std	Y+18, r25	; 0x12
    1084:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1086:	8b 89       	ldd	r24, Y+19	; 0x13
    1088:	9c 89       	ldd	r25, Y+20	; 0x14
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	9c 8b       	std	Y+20, r25	; 0x14
    108e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1090:	8b 89       	ldd	r24, Y+19	; 0x13
    1092:	9c 89       	ldd	r25, Y+20	; 0x14
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	69 f7       	brne	.-38     	; 0x1072 <APP_winnercreen+0xb4>
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <APP_winnercreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109a:	6d 89       	ldd	r22, Y+21	; 0x15
    109c:	7e 89       	ldd	r23, Y+22	; 0x16
    109e:	8f 89       	ldd	r24, Y+23	; 0x17
    10a0:	98 8d       	ldd	r25, Y+24	; 0x18
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9c 8b       	std	Y+20, r25	; 0x14
    10ac:	8b 8b       	std	Y+19, r24	; 0x13
    10ae:	8b 89       	ldd	r24, Y+19	; 0x13
    10b0:	9c 89       	ldd	r25, Y+20	; 0x14
    10b2:	98 8b       	std	Y+16, r25	; 0x10
    10b4:	8f 87       	std	Y+15, r24	; 0x0f
    10b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b8:	98 89       	ldd	r25, Y+16	; 0x10
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <APP_winnercreen+0xfc>
    10be:	98 8b       	std	Y+16, r25	; 0x10
    10c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(SHORT_DELAY);
	LCD_displayString("winner: ");
    10c2:	8c e6       	ldi	r24, 0x6C	; 108
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 26 1a 	call	0x344c	; 0x344c <LCD_displayString>

	for (uint8 var = 0;var < 4; ++var) {
    10ca:	1d 8e       	std	Y+29, r1	; 0x1d
    10cc:	19 c0       	rjmp	.+50     	; 0x1100 <APP_winnercreen+0x142>

		if(counter[var]==maxcounter){
    10ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	fc 01       	movw	r30, r24
    10d6:	e2 58       	subi	r30, 0x82	; 130
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	90 81       	ld	r25, Z
    10dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10de:	98 17       	cp	r25, r24
    10e0:	61 f4       	brne	.+24     	; 0x10fa <APP_winnercreen+0x13c>
			if(flag==1)
    10e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	19 f4       	brne	.+6      	; 0x10ee <APP_winnercreen+0x130>
				LCD_displayCharacter(',');
    10e8:	8c e2       	ldi	r24, 0x2C	; 44
    10ea:	0e 94 60 14 	call	0x28c0	; 0x28c0 <LCD_displayCharacter>
				flag=1;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	8e 8f       	std	Y+30, r24	; 0x1e
			LCD_displayCharacter(65+var);}
    10f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f4:	8f 5b       	subi	r24, 0xBF	; 191
    10f6:	0e 94 60 14 	call	0x28c0	; 0x28c0 <LCD_displayCharacter>
	uint8 flag=0;
	LCD_clearScreen();
	_delay_ms(SHORT_DELAY);
	LCD_displayString("winner: ");

	for (uint8 var = 0;var < 4; ++var) {
    10fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10fc:	8f 5f       	subi	r24, 0xFF	; 255
    10fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1102:	84 30       	cpi	r24, 0x04	; 4
    1104:	20 f3       	brcs	.-56     	; 0x10ce <APP_winnercreen+0x110>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	aa e7       	ldi	r26, 0x7A	; 122
    110c:	b4 e4       	ldi	r27, 0x44	; 68
    110e:	8b 87       	std	Y+11, r24	; 0x0b
    1110:	9c 87       	std	Y+12, r25	; 0x0c
    1112:	ad 87       	std	Y+13, r26	; 0x0d
    1114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	6b 85       	ldd	r22, Y+11	; 0x0b
    1118:	7c 85       	ldd	r23, Y+12	; 0x0c
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a e7       	ldi	r20, 0x7A	; 122
    1124:	55 e4       	ldi	r21, 0x45	; 69
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	a9 87       	std	Y+9, r26	; 0x09
    1134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <APP_winnercreen+0x19a>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <APP_winnercreen+0x218>
	else if (__tmp > 65535)
    1158:	6f 81       	ldd	r22, Y+7	; 0x07
    115a:	78 85       	ldd	r23, Y+8	; 0x08
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <APP_winnercreen+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	6b 85       	ldd	r22, Y+11	; 0x0b
    1172:	7c 85       	ldd	r23, Y+12	; 0x0c
    1174:	8d 85       	ldd	r24, Y+13	; 0x0d
    1176:	9e 85       	ldd	r25, Y+14	; 0x0e
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <APP_winnercreen+0x1fa>
    119a:	80 e9       	ldi	r24, 0x90	; 144
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <APP_winnercreen+0x1e8>
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <APP_winnercreen+0x1dc>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <APP_winnercreen+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <APP_winnercreen+0x224>
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
				LCD_displayCharacter(',');
				flag=1;
			LCD_displayCharacter(65+var);}
	}
	_delay_ms(screen_DELAY);
	APP_mainScreen();
    11ea:	0e 94 58 06 	call	0xcb0	; 0xcb0 <APP_mainScreen>
}
    11ee:	6f 96       	adiw	r28, 0x1f	; 31
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <max>:

static uint8 max(uint8 x,uint8 y){
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <max+0x6>
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	6a 83       	std	Y+2, r22	; 0x02
	if(x>y)
    1210:	99 81       	ldd	r25, Y+1	; 0x01
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	89 17       	cp	r24, r25
    1216:	18 f4       	brcc	.+6      	; 0x121e <max+0x1e>
		return x;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	8b 83       	std	Y+3, r24	; 0x03
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <max+0x22>
	else
		return y;
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <APP_max>:

static uint8 APP_max(){
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <APP_max+0x6>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	uint8 maxCounter = counter[0];
    123a:	80 91 7e 00 	lds	r24, 0x007E
    123e:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 var = 1;var < 4; ++ var)
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <APP_max+0x34>
		maxCounter = max(maxCounter,counter[var]);
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	fc 01       	movw	r30, r24
    124e:	e2 58       	subi	r30, 0x82	; 130
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	90 81       	ld	r25, Z
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	69 2f       	mov	r22, r25
    1258:	0e 94 00 09 	call	0x1200	; 0x1200 <max>
    125c:	8a 83       	std	Y+2, r24	; 0x02
		return y;
}

static uint8 APP_max(){
	uint8 maxCounter = counter[0];
	for (uint8 var = 1;var < 4; ++ var)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	70 f3       	brcs	.-36     	; 0x1246 <APP_max+0x16>
		maxCounter = max(maxCounter,counter[var]);
	return maxCounter;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <GPIO_setup_Pin_Direction>:
#include "DIO_REGS.h"
#include "DIO_Types.h"
#include"gpio.h"


void GPIO_setup_Pin_Direction(uint8 port_ID,uint8 pin_ID,GPIO_Pin_DirectionType direction){
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	27 97       	sbiw	r28, 0x07	; 7
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6a 83       	std	Y+2, r22	; 0x02
    128e:	4b 83       	std	Y+3, r20	; 0x03

	if(direction==OUTPUT)
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	09 f0       	breq	.+2      	; 0x1298 <GPIO_setup_Pin_Direction+0x22>
    1296:	63 c0       	rjmp	.+198    	; 0x135e <GPIO_setup_Pin_Direction+0xe8>
	{
		switch(port_ID)
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3f 83       	std	Y+7, r19	; 0x07
    12a0:	2e 83       	std	Y+6, r18	; 0x06
    12a2:	8e 81       	ldd	r24, Y+6	; 0x06
    12a4:	9f 81       	ldd	r25, Y+7	; 0x07
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	e9 f0       	breq	.+58     	; 0x12e6 <GPIO_setup_Pin_Direction+0x70>
    12ac:	2e 81       	ldd	r18, Y+6	; 0x06
    12ae:	3f 81       	ldd	r19, Y+7	; 0x07
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	61 f1       	breq	.+88     	; 0x130e <GPIO_setup_Pin_Direction+0x98>
    12b6:	8e 81       	ldd	r24, Y+6	; 0x06
    12b8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	e1 f5       	brne	.+120    	; 0x1336 <GPIO_setup_Pin_Direction+0xc0>
		{
		case PORTA_ID:
			SET_BIT(DDRA_REG,pin_ID);
    12be:	aa e3       	ldi	r26, 0x3A	; 58
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ea e3       	ldi	r30, 0x3A	; 58
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	48 2f       	mov	r20, r24
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <GPIO_setup_Pin_Direction+0x66>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <GPIO_setup_Pin_Direction+0x62>
    12e0:	84 2b       	or	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	a7 c0       	rjmp	.+334    	; 0x1434 <GPIO_setup_Pin_Direction+0x1be>
			break;
		case PORTB_ID:
			SET_BIT(DDRB_REG,pin_ID);
    12e6:	a7 e3       	ldi	r26, 0x37	; 55
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e7 e3       	ldi	r30, 0x37	; 55
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <GPIO_setup_Pin_Direction+0x8e>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <GPIO_setup_Pin_Direction+0x8a>
    1308:	84 2b       	or	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	93 c0       	rjmp	.+294    	; 0x1434 <GPIO_setup_Pin_Direction+0x1be>
			break;
		case PORTC_ID:
			SET_BIT(DDRC_REG,pin_ID);
    130e:	a4 e3       	ldi	r26, 0x34	; 52
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e4 e3       	ldi	r30, 0x34	; 52
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_setup_Pin_Direction+0xb6>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_setup_Pin_Direction+0xb2>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	7f c0       	rjmp	.+254    	; 0x1434 <GPIO_setup_Pin_Direction+0x1be>
			break;
		default:
			SET_BIT(DDRD_REG,pin_ID);
    1336:	a1 e3       	ldi	r26, 0x31	; 49
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e1 e3       	ldi	r30, 0x31	; 49
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <GPIO_setup_Pin_Direction+0xde>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <GPIO_setup_Pin_Direction+0xda>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	6b c0       	rjmp	.+214    	; 0x1434 <GPIO_setup_Pin_Direction+0x1be>
			break;
		}
	}
	else if(direction==INPUT)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 23       	and	r24, r24
    1362:	09 f0       	breq	.+2      	; 0x1366 <GPIO_setup_Pin_Direction+0xf0>
    1364:	67 c0       	rjmp	.+206    	; 0x1434 <GPIO_setup_Pin_Direction+0x1be>
	{
		switch(port_ID)
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3d 83       	std	Y+5, r19	; 0x05
    136e:	2c 83       	std	Y+4, r18	; 0x04
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	f9 f0       	breq	.+62     	; 0x13b8 <GPIO_setup_Pin_Direction+0x142>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	79 f1       	breq	.+94     	; 0x13e2 <GPIO_setup_Pin_Direction+0x16c>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	09 f0       	breq	.+2      	; 0x138e <GPIO_setup_Pin_Direction+0x118>
    138c:	3f c0       	rjmp	.+126    	; 0x140c <GPIO_setup_Pin_Direction+0x196>
		{
		case PORTA_ID:
			CLEAR_BIT(DDRA_REG,pin_ID);
    138e:	aa e3       	ldi	r26, 0x3A	; 58
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ea e3       	ldi	r30, 0x3A	; 58
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <GPIO_setup_Pin_Direction+0x136>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <GPIO_setup_Pin_Direction+0x132>
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	3e c0       	rjmp	.+124    	; 0x1434 <GPIO_setup_Pin_Direction+0x1be>
			break;
		case PORTB_ID:
			CLEAR_BIT(DDRB_REG,pin_ID);
    13b8:	a7 e3       	ldi	r26, 0x37	; 55
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e7 e3       	ldi	r30, 0x37	; 55
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <GPIO_setup_Pin_Direction+0x160>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <GPIO_setup_Pin_Direction+0x15c>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	29 c0       	rjmp	.+82     	; 0x1434 <GPIO_setup_Pin_Direction+0x1be>
			break;
		case PORTC_ID:
			CLEAR_BIT(DDRC_REG,pin_ID);
    13e2:	a4 e3       	ldi	r26, 0x34	; 52
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e4 e3       	ldi	r30, 0x34	; 52
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <GPIO_setup_Pin_Direction+0x18a>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <GPIO_setup_Pin_Direction+0x186>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	14 c0       	rjmp	.+40     	; 0x1434 <GPIO_setup_Pin_Direction+0x1be>
			break;
		default:
			CLEAR_BIT(DDRD_REG,pin_ID);
    140c:	a1 e3       	ldi	r26, 0x31	; 49
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e1 e3       	ldi	r30, 0x31	; 49
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_setup_Pin_Direction+0x1b4>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_setup_Pin_Direction+0x1b0>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
			break;

		}
	}
}
    1434:	27 96       	adiw	r28, 0x07	; 7
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <GPIO_setup_Port_Direction>:


void GPIO_setup_Port_Direction(uint8 port_ID,GPIO_Port_DirectionType direction){
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <GPIO_setup_Port_Direction+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <GPIO_setup_Port_Direction+0x8>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	6a 83       	std	Y+2, r22	; 0x02

	switch(port_ID)
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3c 83       	std	Y+4, r19	; 0x04
    145e:	2b 83       	std	Y+3, r18	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	71 f0       	breq	.+28     	; 0x1486 <GPIO_setup_Port_Direction+0x40>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	71 f0       	breq	.+28     	; 0x1490 <GPIO_setup_Port_Direction+0x4a>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	79 f4       	brne	.+30     	; 0x149a <GPIO_setup_Port_Direction+0x54>
	{
	case PORTA_ID:
		DDRA_REG=direction;
    147c:	ea e3       	ldi	r30, 0x3A	; 58
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	80 83       	st	Z, r24
    1484:	0e c0       	rjmp	.+28     	; 0x14a2 <GPIO_setup_Port_Direction+0x5c>
		break;
	case PORTB_ID:
		DDRB_REG=direction;
    1486:	e7 e3       	ldi	r30, 0x37	; 55
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	80 83       	st	Z, r24
    148e:	09 c0       	rjmp	.+18     	; 0x14a2 <GPIO_setup_Port_Direction+0x5c>
		break;
	case PORTC_ID:
		DDRC_REG=direction;
    1490:	e4 e3       	ldi	r30, 0x34	; 52
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	80 83       	st	Z, r24
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <GPIO_setup_Port_Direction+0x5c>
		break;
	default:
		DDRD_REG=direction;
    149a:	e1 e3       	ldi	r30, 0x31	; 49
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	80 83       	st	Z, r24
		break;
	}
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <GPIO_write_Pin>:


void GPIO_write_Pin(uint8 port_ID,uint8 pin_ID,GPIO_Pin_DirectionType direction){
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	27 97       	sbiw	r28, 0x07	; 7
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	6a 83       	std	Y+2, r22	; 0x02
    14c8:	4b 83       	std	Y+3, r20	; 0x03

	if(direction==OUTPUT)
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <GPIO_write_Pin+0x22>
    14d0:	63 c0       	rjmp	.+198    	; 0x1598 <GPIO_write_Pin+0xe8>
		{
			switch(port_ID)
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	3f 83       	std	Y+7, r19	; 0x07
    14da:	2e 83       	std	Y+6, r18	; 0x06
    14dc:	8e 81       	ldd	r24, Y+6	; 0x06
    14de:	9f 81       	ldd	r25, Y+7	; 0x07
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	91 05       	cpc	r25, r1
    14e4:	e9 f0       	breq	.+58     	; 0x1520 <GPIO_write_Pin+0x70>
    14e6:	2e 81       	ldd	r18, Y+6	; 0x06
    14e8:	3f 81       	ldd	r19, Y+7	; 0x07
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	61 f1       	breq	.+88     	; 0x1548 <GPIO_write_Pin+0x98>
    14f0:	8e 81       	ldd	r24, Y+6	; 0x06
    14f2:	9f 81       	ldd	r25, Y+7	; 0x07
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	e1 f5       	brne	.+120    	; 0x1570 <GPIO_write_Pin+0xc0>
			{
			case PORTA_ID:
				SET_BIT(PORTA_REG,pin_ID);
    14f8:	ab e3       	ldi	r26, 0x3B	; 59
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	eb e3       	ldi	r30, 0x3B	; 59
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GPIO_write_Pin+0x66>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <GPIO_write_Pin+0x62>
    151a:	84 2b       	or	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	a7 c0       	rjmp	.+334    	; 0x166e <GPIO_write_Pin+0x1be>
				break;
			case PORTB_ID:
				SET_BIT(PORTB_REG,pin_ID);
    1520:	a8 e3       	ldi	r26, 0x38	; 56
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e8 e3       	ldi	r30, 0x38	; 56
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_write_Pin+0x8e>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_write_Pin+0x8a>
    1542:	84 2b       	or	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	93 c0       	rjmp	.+294    	; 0x166e <GPIO_write_Pin+0x1be>
				break;
			case PORTC_ID:
				SET_BIT(PORTC_REG,pin_ID);
    1548:	a5 e3       	ldi	r26, 0x35	; 53
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e3       	ldi	r30, 0x35	; 53
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <GPIO_write_Pin+0xb6>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <GPIO_write_Pin+0xb2>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	7f c0       	rjmp	.+254    	; 0x166e <GPIO_write_Pin+0x1be>
				break;
			default:
				SET_BIT(PORTD_REG,pin_ID);
    1570:	a2 e3       	ldi	r26, 0x32	; 50
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e2 e3       	ldi	r30, 0x32	; 50
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <GPIO_write_Pin+0xde>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <GPIO_write_Pin+0xda>
    1592:	84 2b       	or	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	6b c0       	rjmp	.+214    	; 0x166e <GPIO_write_Pin+0x1be>
				break;
			}
		}
		else if(direction==INPUT)
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 23       	and	r24, r24
    159c:	09 f0       	breq	.+2      	; 0x15a0 <GPIO_write_Pin+0xf0>
    159e:	67 c0       	rjmp	.+206    	; 0x166e <GPIO_write_Pin+0x1be>
		{
			switch(port_ID)
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3d 83       	std	Y+5, r19	; 0x05
    15a8:	2c 83       	std	Y+4, r18	; 0x04
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 05       	cpc	r25, r1
    15b2:	f9 f0       	breq	.+62     	; 0x15f2 <GPIO_write_Pin+0x142>
    15b4:	2c 81       	ldd	r18, Y+4	; 0x04
    15b6:	3d 81       	ldd	r19, Y+5	; 0x05
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	79 f1       	breq	.+94     	; 0x161c <GPIO_write_Pin+0x16c>
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <GPIO_write_Pin+0x118>
    15c6:	3f c0       	rjmp	.+126    	; 0x1646 <GPIO_write_Pin+0x196>
			{
			case PORTA_ID:
				CLEAR_BIT(PORTA_REG,pin_ID);
    15c8:	ab e3       	ldi	r26, 0x3B	; 59
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	eb e3       	ldi	r30, 0x3B	; 59
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <GPIO_write_Pin+0x136>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <GPIO_write_Pin+0x132>
    15ea:	80 95       	com	r24
    15ec:	84 23       	and	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	3e c0       	rjmp	.+124    	; 0x166e <GPIO_write_Pin+0x1be>
				break;
			case PORTB_ID:
				CLEAR_BIT(PORTB_REG,pin_ID);
    15f2:	a8 e3       	ldi	r26, 0x38	; 56
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e3       	ldi	r30, 0x38	; 56
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_write_Pin+0x160>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_write_Pin+0x15c>
    1614:	80 95       	com	r24
    1616:	84 23       	and	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	29 c0       	rjmp	.+82     	; 0x166e <GPIO_write_Pin+0x1be>
				break;
			case PORTC_ID:
				CLEAR_BIT(PORTC_REG,pin_ID);
    161c:	a5 e3       	ldi	r26, 0x35	; 53
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e3       	ldi	r30, 0x35	; 53
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <GPIO_write_Pin+0x18a>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <GPIO_write_Pin+0x186>
    163e:	80 95       	com	r24
    1640:	84 23       	and	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	14 c0       	rjmp	.+40     	; 0x166e <GPIO_write_Pin+0x1be>
				break;
			default:
				CLEAR_BIT(PORTD_REG,pin_ID);
    1646:	a2 e3       	ldi	r26, 0x32	; 50
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e2 e3       	ldi	r30, 0x32	; 50
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <GPIO_write_Pin+0x1b4>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <GPIO_write_Pin+0x1b0>
    1668:	80 95       	com	r24
    166a:	84 23       	and	r24, r20
    166c:	8c 93       	st	X, r24
				break;

			}
		}
}
    166e:	27 96       	adiw	r28, 0x07	; 7
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <GPIO_write_Port>:


void GPIO_write_Port(uint8 port_ID,GPIO_Port_DirectionType direction){
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <GPIO_write_Port+0x6>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <GPIO_write_Port+0x8>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	6a 83       	std	Y+2, r22	; 0x02

	switch(port_ID)
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	3c 83       	std	Y+4, r19	; 0x04
    1698:	2b 83       	std	Y+3, r18	; 0x03
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	71 f0       	breq	.+28     	; 0x16c0 <GPIO_write_Port+0x40>
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	3c 81       	ldd	r19, Y+4	; 0x04
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	71 f0       	breq	.+28     	; 0x16ca <GPIO_write_Port+0x4a>
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	79 f4       	brne	.+30     	; 0x16d4 <GPIO_write_Port+0x54>
	{
	case PORTA_ID:
		PORTA_REG=direction;
    16b6:	eb e3       	ldi	r30, 0x3B	; 59
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	80 83       	st	Z, r24
    16be:	0e c0       	rjmp	.+28     	; 0x16dc <GPIO_write_Port+0x5c>
		break;
	case PORTB_ID:
		PORTB_REG=direction;
    16c0:	e8 e3       	ldi	r30, 0x38	; 56
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	80 83       	st	Z, r24
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <GPIO_write_Port+0x5c>
		break;
	case PORTC_ID:
		PORTC_REG=direction;
    16ca:	e5 e3       	ldi	r30, 0x35	; 53
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	80 83       	st	Z, r24
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <GPIO_write_Port+0x5c>
		break;
	default:
		PORTD_REG=direction;
    16d4:	e2 e3       	ldi	r30, 0x32	; 50
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	80 83       	st	Z, r24
		break;
	}
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <GPIO_read_Pin>:


uint8 GPIO_read_Pin(uint8 port_ID,uint8 pin_ID){
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <GPIO_read_Pin+0x6>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <GPIO_read_Pin+0x8>
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	6a 83       	std	Y+2, r22	; 0x02

	switch(port_ID)
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3d 83       	std	Y+5, r19	; 0x05
    1704:	2c 83       	std	Y+4, r18	; 0x04
    1706:	4c 81       	ldd	r20, Y+4	; 0x04
    1708:	5d 81       	ldd	r21, Y+5	; 0x05
    170a:	41 30       	cpi	r20, 0x01	; 1
    170c:	51 05       	cpc	r21, r1
    170e:	e9 f0       	breq	.+58     	; 0x174a <GPIO_read_Pin+0x60>
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	91 05       	cpc	r25, r1
    1718:	59 f1       	breq	.+86     	; 0x1770 <GPIO_read_Pin+0x86>
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	3d 81       	ldd	r19, Y+5	; 0x05
    171e:	21 15       	cp	r18, r1
    1720:	31 05       	cpc	r19, r1
    1722:	c9 f5       	brne	.+114    	; 0x1796 <GPIO_read_Pin+0xac>
	{
	case PORTA_ID:
		return GET_BIT(PINA_REG,pin_ID);
    1724:	e9 e3       	ldi	r30, 0x39	; 57
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a9 01       	movw	r20, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <GPIO_read_Pin+0x52>
    1738:	55 95       	asr	r21
    173a:	47 95       	ror	r20
    173c:	8a 95       	dec	r24
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <GPIO_read_Pin+0x4e>
    1740:	ca 01       	movw	r24, r20
    1742:	58 2f       	mov	r21, r24
    1744:	51 70       	andi	r21, 0x01	; 1
    1746:	5b 83       	std	Y+3, r21	; 0x03
    1748:	38 c0       	rjmp	.+112    	; 0x17ba <GPIO_read_Pin+0xd0>
	case PORTB_ID:
		return GET_BIT(PINB_REG,pin_ID);
    174a:	e6 e3       	ldi	r30, 0x36	; 54
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a9 01       	movw	r20, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_read_Pin+0x78>
    175e:	55 95       	asr	r21
    1760:	47 95       	ror	r20
    1762:	8a 95       	dec	r24
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_read_Pin+0x74>
    1766:	ca 01       	movw	r24, r20
    1768:	58 2f       	mov	r21, r24
    176a:	51 70       	andi	r21, 0x01	; 1
    176c:	5b 83       	std	Y+3, r21	; 0x03
    176e:	25 c0       	rjmp	.+74     	; 0x17ba <GPIO_read_Pin+0xd0>
	case PORTC_ID:
		return GET_BIT(PINC_REG,pin_ID);
    1770:	e3 e3       	ldi	r30, 0x33	; 51
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a9 01       	movw	r20, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <GPIO_read_Pin+0x9e>
    1784:	55 95       	asr	r21
    1786:	47 95       	ror	r20
    1788:	8a 95       	dec	r24
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <GPIO_read_Pin+0x9a>
    178c:	ca 01       	movw	r24, r20
    178e:	58 2f       	mov	r21, r24
    1790:	51 70       	andi	r21, 0x01	; 1
    1792:	5b 83       	std	Y+3, r21	; 0x03
    1794:	12 c0       	rjmp	.+36     	; 0x17ba <GPIO_read_Pin+0xd0>
	default:
		return GET_BIT(PIND_REG,pin_ID);
    1796:	e0 e3       	ldi	r30, 0x30	; 48
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a9 01       	movw	r20, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <GPIO_read_Pin+0xc4>
    17aa:	55 95       	asr	r21
    17ac:	47 95       	ror	r20
    17ae:	8a 95       	dec	r24
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <GPIO_read_Pin+0xc0>
    17b2:	ca 01       	movw	r24, r20
    17b4:	58 2f       	mov	r21, r24
    17b6:	51 70       	andi	r21, 0x01	; 1
    17b8:	5b 83       	std	Y+3, r21	; 0x03
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <GPIO_read_Port>:


uint8 GPIO_read_Port(uint8 port_ID){
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <GPIO_read_Port+0x6>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <GPIO_read_Port+0x8>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	89 83       	std	Y+1, r24	; 0x01

	switch(port_ID)
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3c 83       	std	Y+4, r19	; 0x04
    17e2:	2b 83       	std	Y+3, r18	; 0x03
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	91 05       	cpc	r25, r1
    17ec:	71 f0       	breq	.+28     	; 0x180a <GPIO_read_Port+0x3e>
    17ee:	2b 81       	ldd	r18, Y+3	; 0x03
    17f0:	3c 81       	ldd	r19, Y+4	; 0x04
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	71 f0       	breq	.+28     	; 0x1814 <GPIO_read_Port+0x48>
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	79 f4       	brne	.+30     	; 0x181e <GPIO_read_Port+0x52>
	{
	case PORTA_ID:
		return PINA_REG;
    1800:	e9 e3       	ldi	r30, 0x39	; 57
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	90 81       	ld	r25, Z
    1806:	9a 83       	std	Y+2, r25	; 0x02
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <GPIO_read_Port+0x5a>
	case PORTB_ID:
		return PINB_REG;
    180a:	e6 e3       	ldi	r30, 0x36	; 54
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	20 81       	ld	r18, Z
    1810:	2a 83       	std	Y+2, r18	; 0x02
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <GPIO_read_Port+0x5a>
	case PORTC_ID:
		return PINC_REG;
    1814:	e3 e3       	ldi	r30, 0x33	; 51
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	30 81       	ld	r19, Z
    181a:	3a 83       	std	Y+2, r19	; 0x02
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <GPIO_read_Port+0x5a>
	default:
		return PINC_REG;
    181e:	e3 e3       	ldi	r30, 0x33	; 51
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	8a 83       	std	Y+2, r24	; 0x02
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <KEYPAD_getPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
uint8 KEYPAD_getPressedKey(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <KEYPAD_getPressedKey+0x6>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID  ,INPUT);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	64 e0       	ldi	r22, 0x04	; 4
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,INPUT);
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	65 e0       	ldi	r22, 0x05	; 5
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,INPUT);
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	66 e0       	ldi	r22, 0x06	; 6
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,INPUT);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	67 e0       	ldi	r22, 0x07	; 7
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>

	GPIO_setup_Pin_Direction(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,INPUT);
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	62 e0       	ldi	r22, 0x02	; 2
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,INPUT);
    1872:	83 e0       	ldi	r24, 0x03	; 3
    1874:	63 e0       	ldi	r22, 0x03	; 3
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,INPUT);
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	64 e0       	ldi	r22, 0x04	; 4
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
#if (KEYPAD_NUM_COLS==4)
	GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,INPUT);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	65 e0       	ldi	r22, 0x05	; 5
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    1890:	1a 82       	std	Y+2, r1	; 0x02
    1892:	3c c0       	rjmp	.+120    	; 0x190c <KEYPAD_getPressedKey+0xd6>
		{
			GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,OUTPUT);
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	98 2f       	mov	r25, r24
    1898:	9c 5f       	subi	r25, 0xFC	; 252
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	69 2f       	mov	r22, r25
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
			GPIO_write_Pin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	98 2f       	mov	r25, r24
    18a8:	9c 5f       	subi	r25, 0xFC	; 252
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	69 2f       	mov	r22, r25
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    18b4:	19 82       	std	Y+1, r1	; 0x01
    18b6:	1c c0       	rjmp	.+56     	; 0x18f0 <KEYPAD_getPressedKey+0xba>
			{
				if(GPIO_read_Pin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	98 2f       	mov	r25, r24
    18bc:	9e 5f       	subi	r25, 0xFE	; 254
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	69 2f       	mov	r22, r25
    18c2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <GPIO_read_Pin>
    18c6:	88 23       	and	r24, r24
    18c8:	81 f4       	brne	.+32     	; 0x18ea <KEYPAD_getPressedKey+0xb4>
					#endif

					#elif (KEYPAD_NUM_COLS == 4)

					#ifdef STANDARD_KEYPAD
						return ((row*KEYPAD_NUM_COLS)+col+1);
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	98 2f       	mov	r25, r24
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	89 0f       	add	r24, r25
    18de:	8f 5f       	subi	r24, 0xFF	; 255
				}
			}
			GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,INPUT);
		}
	}
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
		{
			GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,OUTPUT);
			GPIO_write_Pin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	08 f3       	brcs	.-62     	; 0x18b8 <KEYPAD_getPressedKey+0x82>
					#endif
					#endif

				}
			}
			GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,INPUT);
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	98 2f       	mov	r25, r24
    18fa:	9c 5f       	subi	r25, 0xFC	; 252
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	69 2f       	mov	r22, r25
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,INPUT);
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	8a 83       	std	Y+2, r24	; 0x02
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	08 f2       	brcs	.-126    	; 0x1894 <KEYPAD_getPressedKey+0x5e>
    1912:	be cf       	rjmp	.-132    	; 0x1890 <KEYPAD_getPressedKey+0x5a>

00001914 <LCD_init>:
#include<util/delay.h>
#include"common_macros.h"
#include"lcd.h"

void LCD_init(void)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	6c 97       	sbiw	r28, 0x1c	; 28
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setup_Pin_Direction(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT);
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT);
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	62 e0       	ldi	r22, 0x02	; 2
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 ea       	ldi	r26, 0xA0	; 160
    1942:	b1 e4       	ldi	r27, 0x41	; 65
    1944:	89 8f       	std	Y+25, r24	; 0x19
    1946:	9a 8f       	std	Y+26, r25	; 0x1a
    1948:	ab 8f       	std	Y+27, r26	; 0x1b
    194a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194c:	69 8d       	ldd	r22, Y+25	; 0x19
    194e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4a e7       	ldi	r20, 0x7A	; 122
    195a:	55 e4       	ldi	r21, 0x45	; 69
    195c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	8d 8b       	std	Y+21, r24	; 0x15
    1966:	9e 8b       	std	Y+22, r25	; 0x16
    1968:	af 8b       	std	Y+23, r26	; 0x17
    196a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    196c:	6d 89       	ldd	r22, Y+21	; 0x15
    196e:	7e 89       	ldd	r23, Y+22	; 0x16
    1970:	8f 89       	ldd	r24, Y+23	; 0x17
    1972:	98 8d       	ldd	r25, Y+24	; 0x18
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e8       	ldi	r20, 0x80	; 128
    197a:	5f e3       	ldi	r21, 0x3F	; 63
    197c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1980:	88 23       	and	r24, r24
    1982:	2c f4       	brge	.+10     	; 0x198e <LCD_init+0x7a>
		__ticks = 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9c 8b       	std	Y+20, r25	; 0x14
    198a:	8b 8b       	std	Y+19, r24	; 0x13
    198c:	3f c0       	rjmp	.+126    	; 0x1a0c <LCD_init+0xf8>
	else if (__tmp > 65535)
    198e:	6d 89       	ldd	r22, Y+21	; 0x15
    1990:	7e 89       	ldd	r23, Y+22	; 0x16
    1992:	8f 89       	ldd	r24, Y+23	; 0x17
    1994:	98 8d       	ldd	r25, Y+24	; 0x18
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	3f ef       	ldi	r19, 0xFF	; 255
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	57 e4       	ldi	r21, 0x47	; 71
    199e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	4c f5       	brge	.+82     	; 0x19f8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a6:	69 8d       	ldd	r22, Y+25	; 0x19
    19a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e2       	ldi	r20, 0x20	; 32
    19b4:	51 e4       	ldi	r21, 0x41	; 65
    19b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9c 8b       	std	Y+20, r25	; 0x14
    19cc:	8b 8b       	std	Y+19, r24	; 0x13
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <LCD_init+0xda>
    19d0:	80 e9       	ldi	r24, 0x90	; 144
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	9a 8b       	std	Y+18, r25	; 0x12
    19d6:	89 8b       	std	Y+17, r24	; 0x11
    19d8:	89 89       	ldd	r24, Y+17	; 0x11
    19da:	9a 89       	ldd	r25, Y+18	; 0x12
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_init+0xc8>
    19e0:	9a 8b       	std	Y+18, r25	; 0x12
    19e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e4:	8b 89       	ldd	r24, Y+19	; 0x13
    19e6:	9c 89       	ldd	r25, Y+20	; 0x14
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ee:	8b 89       	ldd	r24, Y+19	; 0x13
    19f0:	9c 89       	ldd	r25, Y+20	; 0x14
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	69 f7       	brne	.-38     	; 0x19d0 <LCD_init+0xbc>
    19f6:	14 c0       	rjmp	.+40     	; 0x1a20 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	6d 89       	ldd	r22, Y+21	; 0x15
    19fa:	7e 89       	ldd	r23, Y+22	; 0x16
    19fc:	8f 89       	ldd	r24, Y+23	; 0x17
    19fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9c 8b       	std	Y+20, r25	; 0x14
    1a0a:	8b 8b       	std	Y+19, r24	; 0x13
    1a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a10:	98 8b       	std	Y+16, r25	; 0x10
    1a12:	8f 87       	std	Y+15, r24	; 0x0f
    1a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a16:	98 89       	ldd	r25, Y+16	; 0x10
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_init+0x104>
    1a1c:	98 8b       	std	Y+16, r25	; 0x10
    1a1e:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_BIT_MODE == 4)

	/* 2 - Configure the data pins as output port */
	GPIO_setup_Pin_Direction(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,OUTPUT);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	63 e0       	ldi	r22, 0x03	; 3
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,OUTPUT);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	64 e0       	ldi	r22, 0x04	; 4
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,OUTPUT);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	65 e0       	ldi	r22, 0x05	; 5
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
	GPIO_setup_Pin_Direction(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,OUTPUT);
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	66 e0       	ldi	r22, 0x06	; 6
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setup_Pin_Direction>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a4e:	b1 e4       	ldi	r27, 0x41	; 65
    1a50:	8b 87       	std	Y+11, r24	; 0x0b
    1a52:	9c 87       	std	Y+12, r25	; 0x0c
    1a54:	ad 87       	std	Y+13, r26	; 0x0d
    1a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a e7       	ldi	r20, 0x7A	; 122
    1a66:	55 e4       	ldi	r21, 0x45	; 69
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8f 83       	std	Y+7, r24	; 0x07
    1a72:	98 87       	std	Y+8, r25	; 0x08
    1a74:	a9 87       	std	Y+9, r26	; 0x09
    1a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <LCD_init+0x186>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <LCD_init+0x204>
	else if (__tmp > 65535)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <LCD_init+0x1e6>
    1adc:	80 e9       	ldi	r24, 0x90	; 144
    1ade:	91 e0       	ldi	r25, 0x01	; 1
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <LCD_init+0x1d4>
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <LCD_init+0x1c8>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_init+0x210>
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 3.2 - send commands 0x33 0x32 0x28 to init lcd*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1b2c:	83 e3       	ldi	r24, 0x33	; 51
    1b2e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1b32:	82 e3       	ldi	r24, 0x32	; 50
    1b34:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b38:	88 e2       	ldi	r24, 0x28	; 40
    1b3a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <LCD_sendCommand>
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    1b3e:	8c e0       	ldi	r24, 0x0C	; 12
    1b40:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <LCD_sendCommand>
}
    1b4a:	6c 96       	adiw	r28, 0x1c	; 28
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	c5 59       	subi	r28, 0x95	; 149
    1b6a:	d0 40       	sbci	r29, 0x00	; 0
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	fe 01       	movw	r30, r28
    1b78:	eb 56       	subi	r30, 0x6B	; 107
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_write_Pin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOW);
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ef 56       	subi	r30, 0x6F	; 111
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a0 e8       	ldi	r26, 0x80	; 128
    1b94:	bf e3       	ldi	r27, 0x3F	; 63
    1b96:	80 83       	st	Z, r24
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	a2 83       	std	Z+2, r26	; 0x02
    1b9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b9e:	8e 01       	movw	r16, r28
    1ba0:	03 57       	subi	r16, 0x73	; 115
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ef 56       	subi	r30, 0x6F	; 111
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	2b ea       	ldi	r18, 0xAB	; 171
    1bb4:	3a ea       	ldi	r19, 0xAA	; 170
    1bb6:	4a ea       	ldi	r20, 0xAA	; 170
    1bb8:	50 e4       	ldi	r21, 0x40	; 64
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	80 83       	st	Z, r24
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	a2 83       	std	Z+2, r26	; 0x02
    1bca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e3 57       	subi	r30, 0x73	; 115
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e8       	ldi	r20, 0x80	; 128
    1be0:	5f e3       	ldi	r21, 0x3F	; 63
    1be2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be6:	88 23       	and	r24, r24
    1be8:	34 f4       	brge	.+12     	; 0x1bf6 <LCD_sendCommand+0x9a>
		__ticks = 1;
    1bea:	fe 01       	movw	r30, r28
    1bec:	e4 57       	subi	r30, 0x74	; 116
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	80 83       	st	Z, r24
    1bf4:	e0 c0       	rjmp	.+448    	; 0x1db6 <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e3 57       	subi	r30, 0x73	; 115
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4f e7       	ldi	r20, 0x7F	; 127
    1c0a:	53 e4       	ldi	r21, 0x43	; 67
    1c0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c10:	18 16       	cp	r1, r24
    1c12:	0c f0       	brlt	.+2      	; 0x1c16 <LCD_sendCommand+0xba>
    1c14:	c0 c0       	rjmp	.+384    	; 0x1d96 <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1c16:	fe 01       	movw	r30, r28
    1c18:	ef 56       	subi	r30, 0x6F	; 111
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	60 81       	ld	r22, Z
    1c1e:	71 81       	ldd	r23, Z+1	; 0x01
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a e7       	ldi	r20, 0x7A	; 122
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	fe 01       	movw	r30, r28
    1c36:	e8 57       	subi	r30, 0x78	; 120
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 83       	st	Z, r24
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	a2 83       	std	Z+2, r26	; 0x02
    1c40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	8e 01       	movw	r16, r28
    1c44:	0c 57       	subi	r16, 0x7C	; 124
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e8 57       	subi	r30, 0x78	; 120
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a e7       	ldi	r20, 0x7A	; 122
    1c5c:	55 e4       	ldi	r21, 0x45	; 69
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	f8 01       	movw	r30, r16
    1c68:	80 83       	st	Z, r24
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	a2 83       	std	Z+2, r26	; 0x02
    1c6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c70:	fe 01       	movw	r30, r28
    1c72:	ec 57       	subi	r30, 0x7C	; 124
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e8       	ldi	r20, 0x80	; 128
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c8a:	88 23       	and	r24, r24
    1c8c:	44 f4       	brge	.+16     	; 0x1c9e <LCD_sendCommand+0x142>
		__ticks = 1;
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ee 57       	subi	r30, 0x7E	; 126
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
    1c9c:	64 c0       	rjmp	.+200    	; 0x1d66 <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ec 57       	subi	r30, 0x7C	; 124
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	0c f0       	brlt	.+2      	; 0x1cbe <LCD_sendCommand+0x162>
    1cbc:	43 c0       	rjmp	.+134    	; 0x1d44 <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e8 57       	subi	r30, 0x78	; 120
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8e 01       	movw	r16, r28
    1cde:	0e 57       	subi	r16, 0x7E	; 126
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	f8 01       	movw	r30, r16
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
    1cf4:	1f c0       	rjmp	.+62     	; 0x1d34 <LCD_sendCommand+0x1d8>
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e0 58       	subi	r30, 0x80	; 128
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 e9       	ldi	r24, 0x90	; 144
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	fe 01       	movw	r30, r28
    1d06:	e0 58       	subi	r30, 0x80	; 128
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_sendCommand+0x1b2>
    1d12:	fe 01       	movw	r30, r28
    1d14:	e0 58       	subi	r30, 0x80	; 128
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1c:	de 01       	movw	r26, r28
    1d1e:	ae 57       	subi	r26, 0x7E	; 126
    1d20:	bf 4f       	sbci	r27, 0xFF	; 255
    1d22:	fe 01       	movw	r30, r28
    1d24:	ee 57       	subi	r30, 0x7E	; 126
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 81       	ld	r24, Z
    1d2a:	91 81       	ldd	r25, Z+1	; 0x01
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	11 96       	adiw	r26, 0x01	; 1
    1d30:	9c 93       	st	X, r25
    1d32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	fe 01       	movw	r30, r28
    1d36:	ee 57       	subi	r30, 0x7E	; 126
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	d1 f6       	brne	.-76     	; 0x1cf6 <LCD_sendCommand+0x19a>
    1d42:	4b c0       	rjmp	.+150    	; 0x1dda <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d44:	8e 01       	movw	r16, r28
    1d46:	0e 57       	subi	r16, 0x7E	; 126
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ec 57       	subi	r30, 0x7C	; 124
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	f8 01       	movw	r30, r16
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
    1d66:	de 01       	movw	r26, r28
    1d68:	a2 58       	subi	r26, 0x82	; 130
    1d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ee 57       	subi	r30, 0x7E	; 126
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	11 96       	adiw	r26, 0x01	; 1
    1d78:	9c 93       	st	X, r25
    1d7a:	8e 93       	st	-X, r24
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e2 58       	subi	r30, 0x82	; 130
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_sendCommand+0x22a>
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e2 58       	subi	r30, 0x82	; 130
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
    1d94:	22 c0       	rjmp	.+68     	; 0x1dda <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d96:	8e 01       	movw	r16, r28
    1d98:	04 57       	subi	r16, 0x74	; 116
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e3 57       	subi	r30, 0x73	; 115
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	f8 01       	movw	r30, r16
    1db4:	80 83       	st	Z, r24
    1db6:	de 01       	movw	r26, r28
    1db8:	a3 58       	subi	r26, 0x83	; 131
    1dba:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e4 57       	subi	r30, 0x74	; 116
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e3 58       	subi	r30, 0x83	; 131
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	8a 95       	dec	r24
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_sendCommand+0x272>
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e3 58       	subi	r30, 0x83	; 131
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_write_Pin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	62 e0       	ldi	r22, 0x02	; 2
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    1de4:	fe 01       	movw	r30, r28
    1de6:	e7 58       	subi	r30, 0x87	; 135
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 e8       	ldi	r26, 0x80	; 128
    1df0:	bf e3       	ldi	r27, 0x3F	; 63
    1df2:	80 83       	st	Z, r24
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	a2 83       	std	Z+2, r26	; 0x02
    1df8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dfa:	8e 01       	movw	r16, r28
    1dfc:	0b 58       	subi	r16, 0x8B	; 139
    1dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1e00:	fe 01       	movw	r30, r28
    1e02:	e7 58       	subi	r30, 0x87	; 135
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	60 81       	ld	r22, Z
    1e08:	71 81       	ldd	r23, Z+1	; 0x01
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	2b ea       	ldi	r18, 0xAB	; 171
    1e10:	3a ea       	ldi	r19, 0xAA	; 170
    1e12:	4a ea       	ldi	r20, 0xAA	; 170
    1e14:	50 e4       	ldi	r21, 0x40	; 64
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	80 83       	st	Z, r24
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	a2 83       	std	Z+2, r26	; 0x02
    1e26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e28:	fe 01       	movw	r30, r28
    1e2a:	eb 58       	subi	r30, 0x8B	; 139
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e8       	ldi	r20, 0x80	; 128
    1e3c:	5f e3       	ldi	r21, 0x3F	; 63
    1e3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e42:	88 23       	and	r24, r24
    1e44:	34 f4       	brge	.+12     	; 0x1e52 <LCD_sendCommand+0x2f6>
		__ticks = 1;
    1e46:	fe 01       	movw	r30, r28
    1e48:	ec 58       	subi	r30, 0x8C	; 140
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	80 83       	st	Z, r24
    1e50:	e0 c0       	rjmp	.+448    	; 0x2012 <LCD_sendCommand+0x4b6>
	else if (__tmp > 255)
    1e52:	fe 01       	movw	r30, r28
    1e54:	eb 58       	subi	r30, 0x8B	; 139
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4f e7       	ldi	r20, 0x7F	; 127
    1e66:	53 e4       	ldi	r21, 0x43	; 67
    1e68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e6c:	18 16       	cp	r1, r24
    1e6e:	0c f0       	brlt	.+2      	; 0x1e72 <LCD_sendCommand+0x316>
    1e70:	c0 c0       	rjmp	.+384    	; 0x1ff2 <LCD_sendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    1e72:	fe 01       	movw	r30, r28
    1e74:	e7 58       	subi	r30, 0x87	; 135
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a e7       	ldi	r20, 0x7A	; 122
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	fe 01       	movw	r30, r28
    1e92:	e0 59       	subi	r30, 0x90	; 144
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 83       	st	Z, r24
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	a2 83       	std	Z+2, r26	; 0x02
    1e9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9e:	8e 01       	movw	r16, r28
    1ea0:	04 59       	subi	r16, 0x94	; 148
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e0 59       	subi	r30, 0x90	; 144
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a e7       	ldi	r20, 0x7A	; 122
    1eb8:	55 e4       	ldi	r21, 0x45	; 69
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	80 83       	st	Z, r24
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	a2 83       	std	Z+2, r26	; 0x02
    1eca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e4 59       	subi	r30, 0x94	; 148
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	60 81       	ld	r22, Z
    1ed4:	71 81       	ldd	r23, Z+1	; 0x01
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	93 81       	ldd	r25, Z+3	; 0x03
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	44 f4       	brge	.+16     	; 0x1efa <LCD_sendCommand+0x39e>
		__ticks = 1;
    1eea:	fe 01       	movw	r30, r28
    1eec:	e6 59       	subi	r30, 0x96	; 150
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
    1ef8:	64 c0       	rjmp	.+200    	; 0x1fc2 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1efa:	fe 01       	movw	r30, r28
    1efc:	e4 59       	subi	r30, 0x94	; 148
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	4f e7       	ldi	r20, 0x7F	; 127
    1f0e:	57 e4       	ldi	r21, 0x47	; 71
    1f10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f14:	18 16       	cp	r1, r24
    1f16:	0c f0       	brlt	.+2      	; 0x1f1a <LCD_sendCommand+0x3be>
    1f18:	43 c0       	rjmp	.+134    	; 0x1fa0 <LCD_sendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e0 59       	subi	r30, 0x90	; 144
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	60 81       	ld	r22, Z
    1f22:	71 81       	ldd	r23, Z+1	; 0x01
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	93 81       	ldd	r25, Z+3	; 0x03
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	51 e4       	ldi	r21, 0x41	; 65
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8e 01       	movw	r16, r28
    1f3a:	06 59       	subi	r16, 0x96	; 150
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
    1f50:	1f c0       	rjmp	.+62     	; 0x1f90 <LCD_sendCommand+0x434>
    1f52:	fe 01       	movw	r30, r28
    1f54:	e8 59       	subi	r30, 0x98	; 152
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 e9       	ldi	r24, 0x90	; 144
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f60:	fe 01       	movw	r30, r28
    1f62:	e8 59       	subi	r30, 0x98	; 152
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <LCD_sendCommand+0x40e>
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e8 59       	subi	r30, 0x98	; 152
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f78:	de 01       	movw	r26, r28
    1f7a:	a6 59       	subi	r26, 0x96	; 150
    1f7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e6 59       	subi	r30, 0x96	; 150
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	11 96       	adiw	r26, 0x01	; 1
    1f8c:	9c 93       	st	X, r25
    1f8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f90:	fe 01       	movw	r30, r28
    1f92:	e6 59       	subi	r30, 0x96	; 150
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	d1 f6       	brne	.-76     	; 0x1f52 <LCD_sendCommand+0x3f6>
    1f9e:	4b c0       	rjmp	.+150    	; 0x2036 <LCD_sendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa0:	8e 01       	movw	r16, r28
    1fa2:	06 59       	subi	r16, 0x96	; 150
    1fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e4 59       	subi	r30, 0x94	; 148
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
    1fc2:	de 01       	movw	r26, r28
    1fc4:	aa 59       	subi	r26, 0x9A	; 154
    1fc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e6 59       	subi	r30, 0x96	; 150
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	11 96       	adiw	r26, 0x01	; 1
    1fd4:	9c 93       	st	X, r25
    1fd6:	8e 93       	st	-X, r24
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ea 59       	subi	r30, 0x9A	; 154
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_sendCommand+0x486>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ea 59       	subi	r30, 0x9A	; 154
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
    1ff0:	22 c0       	rjmp	.+68     	; 0x2036 <LCD_sendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ff2:	8e 01       	movw	r16, r28
    1ff4:	0c 58       	subi	r16, 0x8C	; 140
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	eb 58       	subi	r30, 0x8B	; 139
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	f8 01       	movw	r30, r16
    2010:	80 83       	st	Z, r24
    2012:	de 01       	movw	r26, r28
    2014:	ab 59       	subi	r26, 0x9B	; 155
    2016:	bf 4f       	sbci	r27, 0xFF	; 255
    2018:	fe 01       	movw	r30, r28
    201a:	ec 58       	subi	r30, 0x8C	; 140
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2022:	fe 01       	movw	r30, r28
    2024:	eb 59       	subi	r30, 0x9B	; 155
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	8a 95       	dec	r24
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_sendCommand+0x4ce>
    202e:	fe 01       	movw	r30, r28
    2030:	eb 59       	subi	r30, 0x9B	; 155
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 83       	st	Z, r24
	_delay_us(1);

	#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,4));
    2036:	fe 01       	movw	r30, r28
    2038:	eb 56       	subi	r30, 0x6B	; 107
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	82 95       	swap	r24
    2040:	8f 70       	andi	r24, 0x0F	; 15
    2042:	98 2f       	mov	r25, r24
    2044:	91 70       	andi	r25, 0x01	; 1
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	63 e0       	ldi	r22, 0x03	; 3
    204a:	49 2f       	mov	r20, r25
    204c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,5));
    2050:	fe 01       	movw	r30, r28
    2052:	eb 56       	subi	r30, 0x6B	; 107
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	82 95       	swap	r24
    205a:	86 95       	lsr	r24
    205c:	87 70       	andi	r24, 0x07	; 7
    205e:	98 2f       	mov	r25, r24
    2060:	91 70       	andi	r25, 0x01	; 1
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	64 e0       	ldi	r22, 0x04	; 4
    2066:	49 2f       	mov	r20, r25
    2068:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,6));
    206c:	fe 01       	movw	r30, r28
    206e:	eb 56       	subi	r30, 0x6B	; 107
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	82 95       	swap	r24
    2076:	86 95       	lsr	r24
    2078:	86 95       	lsr	r24
    207a:	83 70       	andi	r24, 0x03	; 3
    207c:	98 2f       	mov	r25, r24
    207e:	91 70       	andi	r25, 0x01	; 1
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	65 e0       	ldi	r22, 0x05	; 5
    2084:	49 2f       	mov	r20, r25
    2086:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,7));
    208a:	fe 01       	movw	r30, r28
    208c:	eb 56       	subi	r30, 0x6B	; 107
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	98 2f       	mov	r25, r24
    2094:	99 1f       	adc	r25, r25
    2096:	99 27       	eor	r25, r25
    2098:	99 1f       	adc	r25, r25
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	66 e0       	ldi	r22, 0x06	; 6
    209e:	49 2f       	mov	r20, r25
    20a0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    20a4:	fe 01       	movw	r30, r28
    20a6:	ef 59       	subi	r30, 0x9F	; 159
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e8       	ldi	r26, 0x80	; 128
    20b0:	bf e3       	ldi	r27, 0x3F	; 63
    20b2:	80 83       	st	Z, r24
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	a2 83       	std	Z+2, r26	; 0x02
    20b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ba:	8e 01       	movw	r16, r28
    20bc:	03 5a       	subi	r16, 0xA3	; 163
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
    20c0:	fe 01       	movw	r30, r28
    20c2:	ef 59       	subi	r30, 0x9F	; 159
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a e7       	ldi	r20, 0x7A	; 122
    20d4:	55 e4       	ldi	r21, 0x45	; 69
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	f8 01       	movw	r30, r16
    20e0:	80 83       	st	Z, r24
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	a2 83       	std	Z+2, r26	; 0x02
    20e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e8:	fe 01       	movw	r30, r28
    20ea:	e3 5a       	subi	r30, 0xA3	; 163
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	60 81       	ld	r22, Z
    20f0:	71 81       	ldd	r23, Z+1	; 0x01
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	44 f4       	brge	.+16     	; 0x2116 <LCD_sendCommand+0x5ba>
		__ticks = 1;
    2106:	fe 01       	movw	r30, r28
    2108:	e5 5a       	subi	r30, 0xA5	; 165
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	80 83       	st	Z, r24
    2114:	64 c0       	rjmp	.+200    	; 0x21de <LCD_sendCommand+0x682>
	else if (__tmp > 65535)
    2116:	fe 01       	movw	r30, r28
    2118:	e3 5a       	subi	r30, 0xA3	; 163
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	0c f0       	brlt	.+2      	; 0x2136 <LCD_sendCommand+0x5da>
    2134:	43 c0       	rjmp	.+134    	; 0x21bc <LCD_sendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	fe 01       	movw	r30, r28
    2138:	ef 59       	subi	r30, 0x9F	; 159
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e2       	ldi	r20, 0x20	; 32
    214a:	51 e4       	ldi	r21, 0x41	; 65
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8e 01       	movw	r16, r28
    2156:	05 5a       	subi	r16, 0xA5	; 165
    2158:	1f 4f       	sbci	r17, 0xFF	; 255
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	f8 01       	movw	r30, r16
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	1f c0       	rjmp	.+62     	; 0x21ac <LCD_sendCommand+0x650>
    216e:	fe 01       	movw	r30, r28
    2170:	e7 5a       	subi	r30, 0xA7	; 167
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 e9       	ldi	r24, 0x90	; 144
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    217c:	fe 01       	movw	r30, r28
    217e:	e7 5a       	subi	r30, 0xA7	; 167
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_sendCommand+0x62a>
    218a:	fe 01       	movw	r30, r28
    218c:	e7 5a       	subi	r30, 0xA7	; 167
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	de 01       	movw	r26, r28
    2196:	a5 5a       	subi	r26, 0xA5	; 165
    2198:	bf 4f       	sbci	r27, 0xFF	; 255
    219a:	fe 01       	movw	r30, r28
    219c:	e5 5a       	subi	r30, 0xA5	; 165
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	11 96       	adiw	r26, 0x01	; 1
    21a8:	9c 93       	st	X, r25
    21aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ac:	fe 01       	movw	r30, r28
    21ae:	e5 5a       	subi	r30, 0xA5	; 165
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	d1 f6       	brne	.-76     	; 0x216e <LCD_sendCommand+0x612>
    21ba:	27 c0       	rjmp	.+78     	; 0x220a <LCD_sendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21bc:	8e 01       	movw	r16, r28
    21be:	05 5a       	subi	r16, 0xA5	; 165
    21c0:	1f 4f       	sbci	r17, 0xFF	; 255
    21c2:	fe 01       	movw	r30, r28
    21c4:	e3 5a       	subi	r30, 0xA3	; 163
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	60 81       	ld	r22, Z
    21ca:	71 81       	ldd	r23, Z+1	; 0x01
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	f8 01       	movw	r30, r16
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	de 01       	movw	r26, r28
    21e0:	a9 5a       	subi	r26, 0xA9	; 169
    21e2:	bf 4f       	sbci	r27, 0xFF	; 255
    21e4:	fe 01       	movw	r30, r28
    21e6:	e5 5a       	subi	r30, 0xA5	; 165
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	8d 93       	st	X+, r24
    21f0:	9c 93       	st	X, r25
    21f2:	fe 01       	movw	r30, r28
    21f4:	e9 5a       	subi	r30, 0xA9	; 169
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_sendCommand+0x6a0>
    2200:	fe 01       	movw	r30, r28
    2202:	e9 5a       	subi	r30, 0xA9	; 169
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_write_Pin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	62 e0       	ldi	r22, 0x02	; 2
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    2214:	fe 01       	movw	r30, r28
    2216:	ed 5a       	subi	r30, 0xAD	; 173
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a0 e8       	ldi	r26, 0x80	; 128
    2220:	bf e3       	ldi	r27, 0x3F	; 63
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    222a:	8e 01       	movw	r16, r28
    222c:	01 5b       	subi	r16, 0xB1	; 177
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	fe 01       	movw	r30, r28
    2232:	ed 5a       	subi	r30, 0xAD	; 173
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	2b ea       	ldi	r18, 0xAB	; 171
    2240:	3a ea       	ldi	r19, 0xAA	; 170
    2242:	4a ea       	ldi	r20, 0xAA	; 170
    2244:	50 e4       	ldi	r21, 0x40	; 64
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	f8 01       	movw	r30, r16
    2250:	80 83       	st	Z, r24
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	a2 83       	std	Z+2, r26	; 0x02
    2256:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2258:	fe 01       	movw	r30, r28
    225a:	e1 5b       	subi	r30, 0xB1	; 177
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	34 f4       	brge	.+12     	; 0x2282 <LCD_sendCommand+0x726>
		__ticks = 1;
    2276:	fe 01       	movw	r30, r28
    2278:	e2 5b       	subi	r30, 0xB2	; 178
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	80 83       	st	Z, r24
    2280:	e0 c0       	rjmp	.+448    	; 0x2442 <LCD_sendCommand+0x8e6>
	else if (__tmp > 255)
    2282:	fe 01       	movw	r30, r28
    2284:	e1 5b       	subi	r30, 0xB1	; 177
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	4f e7       	ldi	r20, 0x7F	; 127
    2296:	53 e4       	ldi	r21, 0x43	; 67
    2298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229c:	18 16       	cp	r1, r24
    229e:	0c f0       	brlt	.+2      	; 0x22a2 <LCD_sendCommand+0x746>
    22a0:	c0 c0       	rjmp	.+384    	; 0x2422 <LCD_sendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    22a2:	fe 01       	movw	r30, r28
    22a4:	ed 5a       	subi	r30, 0xAD	; 173
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	4a e7       	ldi	r20, 0x7A	; 122
    22b6:	54 e4       	ldi	r21, 0x44	; 68
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	fe 01       	movw	r30, r28
    22c2:	e6 5b       	subi	r30, 0xB6	; 182
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	80 83       	st	Z, r24
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	a2 83       	std	Z+2, r26	; 0x02
    22cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ce:	8e 01       	movw	r16, r28
    22d0:	0a 5b       	subi	r16, 0xBA	; 186
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	fe 01       	movw	r30, r28
    22d6:	e6 5b       	subi	r30, 0xB6	; 182
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4a e7       	ldi	r20, 0x7A	; 122
    22e8:	55 e4       	ldi	r21, 0x45	; 69
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	f8 01       	movw	r30, r16
    22f4:	80 83       	st	Z, r24
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	a2 83       	std	Z+2, r26	; 0x02
    22fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22fc:	fe 01       	movw	r30, r28
    22fe:	ea 5b       	subi	r30, 0xBA	; 186
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	44 f4       	brge	.+16     	; 0x232a <LCD_sendCommand+0x7ce>
		__ticks = 1;
    231a:	fe 01       	movw	r30, r28
    231c:	ec 5b       	subi	r30, 0xBC	; 188
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
    2328:	64 c0       	rjmp	.+200    	; 0x23f2 <LCD_sendCommand+0x896>
	else if (__tmp > 65535)
    232a:	fe 01       	movw	r30, r28
    232c:	ea 5b       	subi	r30, 0xBA	; 186
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	0c f0       	brlt	.+2      	; 0x234a <LCD_sendCommand+0x7ee>
    2348:	43 c0       	rjmp	.+134    	; 0x23d0 <LCD_sendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234a:	fe 01       	movw	r30, r28
    234c:	e6 5b       	subi	r30, 0xB6	; 182
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e2       	ldi	r20, 0x20	; 32
    235e:	51 e4       	ldi	r21, 0x41	; 65
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8e 01       	movw	r16, r28
    236a:	0c 5b       	subi	r16, 0xBC	; 188
    236c:	1f 4f       	sbci	r17, 0xFF	; 255
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	f8 01       	movw	r30, r16
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	80 83       	st	Z, r24
    2380:	1f c0       	rjmp	.+62     	; 0x23c0 <LCD_sendCommand+0x864>
    2382:	fe 01       	movw	r30, r28
    2384:	ee 5b       	subi	r30, 0xBE	; 190
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 e9       	ldi	r24, 0x90	; 144
    238a:	91 e0       	ldi	r25, 0x01	; 1
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
    2390:	fe 01       	movw	r30, r28
    2392:	ee 5b       	subi	r30, 0xBE	; 190
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <LCD_sendCommand+0x83e>
    239e:	fe 01       	movw	r30, r28
    23a0:	ee 5b       	subi	r30, 0xBE	; 190
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	de 01       	movw	r26, r28
    23aa:	ac 5b       	subi	r26, 0xBC	; 188
    23ac:	bf 4f       	sbci	r27, 0xFF	; 255
    23ae:	fe 01       	movw	r30, r28
    23b0:	ec 5b       	subi	r30, 0xBC	; 188
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	91 81       	ldd	r25, Z+1	; 0x01
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	9c 93       	st	X, r25
    23be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c0:	fe 01       	movw	r30, r28
    23c2:	ec 5b       	subi	r30, 0xBC	; 188
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	d1 f6       	brne	.-76     	; 0x2382 <LCD_sendCommand+0x826>
    23ce:	42 c0       	rjmp	.+132    	; 0x2454 <LCD_sendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	8e 01       	movw	r16, r28
    23d2:	0c 5b       	subi	r16, 0xBC	; 188
    23d4:	1f 4f       	sbci	r17, 0xFF	; 255
    23d6:	fe 01       	movw	r30, r28
    23d8:	ea 5b       	subi	r30, 0xBA	; 186
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	60 81       	ld	r22, Z
    23de:	71 81       	ldd	r23, Z+1	; 0x01
    23e0:	82 81       	ldd	r24, Z+2	; 0x02
    23e2:	93 81       	ldd	r25, Z+3	; 0x03
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	f8 01       	movw	r30, r16
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
    23f2:	de 01       	movw	r26, r28
    23f4:	a0 5c       	subi	r26, 0xC0	; 192
    23f6:	bf 4f       	sbci	r27, 0xFF	; 255
    23f8:	fe 01       	movw	r30, r28
    23fa:	ec 5b       	subi	r30, 0xBC	; 188
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	11 96       	adiw	r26, 0x01	; 1
    2404:	9c 93       	st	X, r25
    2406:	8e 93       	st	-X, r24
    2408:	fe 01       	movw	r30, r28
    240a:	e0 5c       	subi	r30, 0xC0	; 192
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <LCD_sendCommand+0x8b6>
    2416:	fe 01       	movw	r30, r28
    2418:	e0 5c       	subi	r30, 0xC0	; 192
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    2420:	19 c0       	rjmp	.+50     	; 0x2454 <LCD_sendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2422:	8e 01       	movw	r16, r28
    2424:	02 5b       	subi	r16, 0xB2	; 178
    2426:	1f 4f       	sbci	r17, 0xFF	; 255
    2428:	fe 01       	movw	r30, r28
    242a:	e1 5b       	subi	r30, 0xB1	; 177
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	f8 01       	movw	r30, r16
    2440:	80 83       	st	Z, r24
    2442:	fe 01       	movw	r30, r28
    2444:	e2 5b       	subi	r30, 0xB2	; 178
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 81       	ld	r24, Z
    244a:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    244c:	8f ad       	ldd	r24, Y+63	; 0x3f
    244e:	8a 95       	dec	r24
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_sendCommand+0x8f2>
    2452:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_write_Pin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	62 e0       	ldi	r22, 0x02	; 2
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a0 e8       	ldi	r26, 0x80	; 128
    2464:	bf e3       	ldi	r27, 0x3F	; 63
    2466:	8b af       	std	Y+59, r24	; 0x3b
    2468:	9c af       	std	Y+60, r25	; 0x3c
    246a:	ad af       	std	Y+61, r26	; 0x3d
    246c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    246e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2470:	7c ad       	ldd	r23, Y+60	; 0x3c
    2472:	8d ad       	ldd	r24, Y+61	; 0x3d
    2474:	9e ad       	ldd	r25, Y+62	; 0x3e
    2476:	2b ea       	ldi	r18, 0xAB	; 171
    2478:	3a ea       	ldi	r19, 0xAA	; 170
    247a:	4a ea       	ldi	r20, 0xAA	; 170
    247c:	50 e4       	ldi	r21, 0x40	; 64
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8f ab       	std	Y+55, r24	; 0x37
    2488:	98 af       	std	Y+56, r25	; 0x38
    248a:	a9 af       	std	Y+57, r26	; 0x39
    248c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    248e:	6f a9       	ldd	r22, Y+55	; 0x37
    2490:	78 ad       	ldd	r23, Y+56	; 0x38
    2492:	89 ad       	ldd	r24, Y+57	; 0x39
    2494:	9a ad       	ldd	r25, Y+58	; 0x3a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	1c f4       	brge	.+6      	; 0x24ac <LCD_sendCommand+0x950>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	8e ab       	std	Y+54, r24	; 0x36
    24aa:	91 c0       	rjmp	.+290    	; 0x25ce <LCD_sendCommand+0xa72>
	else if (__tmp > 255)
    24ac:	6f a9       	ldd	r22, Y+55	; 0x37
    24ae:	78 ad       	ldd	r23, Y+56	; 0x38
    24b0:	89 ad       	ldd	r24, Y+57	; 0x39
    24b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	53 e4       	ldi	r21, 0x43	; 67
    24bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	0c f0       	brlt	.+2      	; 0x24c6 <LCD_sendCommand+0x96a>
    24c4:	7b c0       	rjmp	.+246    	; 0x25bc <LCD_sendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    24c6:	6b ad       	ldd	r22, Y+59	; 0x3b
    24c8:	7c ad       	ldd	r23, Y+60	; 0x3c
    24ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    24cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	4a e7       	ldi	r20, 0x7A	; 122
    24d4:	54 e4       	ldi	r21, 0x44	; 68
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	8a ab       	std	Y+50, r24	; 0x32
    24e0:	9b ab       	std	Y+51, r25	; 0x33
    24e2:	ac ab       	std	Y+52, r26	; 0x34
    24e4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	6a a9       	ldd	r22, Y+50	; 0x32
    24e8:	7b a9       	ldd	r23, Y+51	; 0x33
    24ea:	8c a9       	ldd	r24, Y+52	; 0x34
    24ec:	9d a9       	ldd	r25, Y+53	; 0x35
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a e7       	ldi	r20, 0x7A	; 122
    24f4:	55 e4       	ldi	r21, 0x45	; 69
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	8e a7       	std	Y+46, r24	; 0x2e
    2500:	9f a7       	std	Y+47, r25	; 0x2f
    2502:	a8 ab       	std	Y+48, r26	; 0x30
    2504:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2506:	6e a5       	ldd	r22, Y+46	; 0x2e
    2508:	7f a5       	ldd	r23, Y+47	; 0x2f
    250a:	88 a9       	ldd	r24, Y+48	; 0x30
    250c:	99 a9       	ldd	r25, Y+49	; 0x31
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    251a:	88 23       	and	r24, r24
    251c:	2c f4       	brge	.+10     	; 0x2528 <LCD_sendCommand+0x9cc>
		__ticks = 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9d a7       	std	Y+45, r25	; 0x2d
    2524:	8c a7       	std	Y+44, r24	; 0x2c
    2526:	3f c0       	rjmp	.+126    	; 0x25a6 <LCD_sendCommand+0xa4a>
	else if (__tmp > 65535)
    2528:	6e a5       	ldd	r22, Y+46	; 0x2e
    252a:	7f a5       	ldd	r23, Y+47	; 0x2f
    252c:	88 a9       	ldd	r24, Y+48	; 0x30
    252e:	99 a9       	ldd	r25, Y+49	; 0x31
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	3f ef       	ldi	r19, 0xFF	; 255
    2534:	4f e7       	ldi	r20, 0x7F	; 127
    2536:	57 e4       	ldi	r21, 0x47	; 71
    2538:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253c:	18 16       	cp	r1, r24
    253e:	4c f5       	brge	.+82     	; 0x2592 <LCD_sendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	6a a9       	ldd	r22, Y+50	; 0x32
    2542:	7b a9       	ldd	r23, Y+51	; 0x33
    2544:	8c a9       	ldd	r24, Y+52	; 0x34
    2546:	9d a9       	ldd	r25, Y+53	; 0x35
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e2       	ldi	r20, 0x20	; 32
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9d a7       	std	Y+45, r25	; 0x2d
    2566:	8c a7       	std	Y+44, r24	; 0x2c
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <LCD_sendCommand+0xa2c>
    256a:	80 e9       	ldi	r24, 0x90	; 144
    256c:	91 e0       	ldi	r25, 0x01	; 1
    256e:	9b a7       	std	Y+43, r25	; 0x2b
    2570:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2572:	8a a5       	ldd	r24, Y+42	; 0x2a
    2574:	9b a5       	ldd	r25, Y+43	; 0x2b
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <LCD_sendCommand+0xa1a>
    257a:	9b a7       	std	Y+43, r25	; 0x2b
    257c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2580:	9d a5       	ldd	r25, Y+45	; 0x2d
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	9d a7       	std	Y+45, r25	; 0x2d
    2586:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	8c a5       	ldd	r24, Y+44	; 0x2c
    258a:	9d a5       	ldd	r25, Y+45	; 0x2d
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	69 f7       	brne	.-38     	; 0x256a <LCD_sendCommand+0xa0e>
    2590:	24 c0       	rjmp	.+72     	; 0x25da <LCD_sendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	6e a5       	ldd	r22, Y+46	; 0x2e
    2594:	7f a5       	ldd	r23, Y+47	; 0x2f
    2596:	88 a9       	ldd	r24, Y+48	; 0x30
    2598:	99 a9       	ldd	r25, Y+49	; 0x31
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9d a7       	std	Y+45, r25	; 0x2d
    25a4:	8c a7       	std	Y+44, r24	; 0x2c
    25a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    25a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    25aa:	99 a7       	std	Y+41, r25	; 0x29
    25ac:	88 a7       	std	Y+40, r24	; 0x28
    25ae:	88 a5       	ldd	r24, Y+40	; 0x28
    25b0:	99 a5       	ldd	r25, Y+41	; 0x29
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_sendCommand+0xa56>
    25b6:	99 a7       	std	Y+41, r25	; 0x29
    25b8:	88 a7       	std	Y+40, r24	; 0x28
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <LCD_sendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25bc:	6f a9       	ldd	r22, Y+55	; 0x37
    25be:	78 ad       	ldd	r23, Y+56	; 0x38
    25c0:	89 ad       	ldd	r24, Y+57	; 0x39
    25c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	8e ab       	std	Y+54, r24	; 0x36
    25ce:	8e a9       	ldd	r24, Y+54	; 0x36
    25d0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25d2:	8f a1       	ldd	r24, Y+39	; 0x27
    25d4:	8a 95       	dec	r24
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_sendCommand+0xa78>
    25d8:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,0));
    25da:	fe 01       	movw	r30, r28
    25dc:	eb 56       	subi	r30, 0x6B	; 107
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 81       	ld	r24, Z
    25e2:	98 2f       	mov	r25, r24
    25e4:	91 70       	andi	r25, 0x01	; 1
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	63 e0       	ldi	r22, 0x03	; 3
    25ea:	49 2f       	mov	r20, r25
    25ec:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,1));
    25f0:	fe 01       	movw	r30, r28
    25f2:	eb 56       	subi	r30, 0x6B	; 107
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	86 95       	lsr	r24
    25fa:	98 2f       	mov	r25, r24
    25fc:	91 70       	andi	r25, 0x01	; 1
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	64 e0       	ldi	r22, 0x04	; 4
    2602:	49 2f       	mov	r20, r25
    2604:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,2));
    2608:	fe 01       	movw	r30, r28
    260a:	eb 56       	subi	r30, 0x6B	; 107
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	86 95       	lsr	r24
    2612:	86 95       	lsr	r24
    2614:	98 2f       	mov	r25, r24
    2616:	91 70       	andi	r25, 0x01	; 1
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	65 e0       	ldi	r22, 0x05	; 5
    261c:	49 2f       	mov	r20, r25
    261e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,3));
    2622:	fe 01       	movw	r30, r28
    2624:	eb 56       	subi	r30, 0x6B	; 107
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	86 95       	lsr	r24
    262c:	86 95       	lsr	r24
    262e:	86 95       	lsr	r24
    2630:	98 2f       	mov	r25, r24
    2632:	91 70       	andi	r25, 0x01	; 1
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	66 e0       	ldi	r22, 0x06	; 6
    2638:	49 2f       	mov	r20, r25
    263a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	a0 e8       	ldi	r26, 0x80	; 128
    2644:	bf e3       	ldi	r27, 0x3F	; 63
    2646:	8b a3       	std	Y+35, r24	; 0x23
    2648:	9c a3       	std	Y+36, r25	; 0x24
    264a:	ad a3       	std	Y+37, r26	; 0x25
    264c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264e:	6b a1       	ldd	r22, Y+35	; 0x23
    2650:	7c a1       	ldd	r23, Y+36	; 0x24
    2652:	8d a1       	ldd	r24, Y+37	; 0x25
    2654:	9e a1       	ldd	r25, Y+38	; 0x26
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	4a e7       	ldi	r20, 0x7A	; 122
    265c:	55 e4       	ldi	r21, 0x45	; 69
    265e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	8f 8f       	std	Y+31, r24	; 0x1f
    2668:	98 a3       	std	Y+32, r25	; 0x20
    266a:	a9 a3       	std	Y+33, r26	; 0x21
    266c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    266e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2670:	78 a1       	ldd	r23, Y+32	; 0x20
    2672:	89 a1       	ldd	r24, Y+33	; 0x21
    2674:	9a a1       	ldd	r25, Y+34	; 0x22
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e8       	ldi	r20, 0x80	; 128
    267c:	5f e3       	ldi	r21, 0x3F	; 63
    267e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2682:	88 23       	and	r24, r24
    2684:	2c f4       	brge	.+10     	; 0x2690 <LCD_sendCommand+0xb34>
		__ticks = 1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	9e 8f       	std	Y+30, r25	; 0x1e
    268c:	8d 8f       	std	Y+29, r24	; 0x1d
    268e:	3f c0       	rjmp	.+126    	; 0x270e <LCD_sendCommand+0xbb2>
	else if (__tmp > 65535)
    2690:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2692:	78 a1       	ldd	r23, Y+32	; 0x20
    2694:	89 a1       	ldd	r24, Y+33	; 0x21
    2696:	9a a1       	ldd	r25, Y+34	; 0x22
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	3f ef       	ldi	r19, 0xFF	; 255
    269c:	4f e7       	ldi	r20, 0x7F	; 127
    269e:	57 e4       	ldi	r21, 0x47	; 71
    26a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	4c f5       	brge	.+82     	; 0x26fa <LCD_sendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a8:	6b a1       	ldd	r22, Y+35	; 0x23
    26aa:	7c a1       	ldd	r23, Y+36	; 0x24
    26ac:	8d a1       	ldd	r24, Y+37	; 0x25
    26ae:	9e a1       	ldd	r25, Y+38	; 0x26
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e2       	ldi	r20, 0x20	; 32
    26b6:	51 e4       	ldi	r21, 0x41	; 65
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9e 8f       	std	Y+30, r25	; 0x1e
    26ce:	8d 8f       	std	Y+29, r24	; 0x1d
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <LCD_sendCommand+0xb94>
    26d2:	80 e9       	ldi	r24, 0x90	; 144
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	9c 8f       	std	Y+28, r25	; 0x1c
    26d8:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <LCD_sendCommand+0xb82>
    26e2:	9c 8f       	std	Y+28, r25	; 0x1c
    26e4:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	9e 8f       	std	Y+30, r25	; 0x1e
    26ee:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	69 f7       	brne	.-38     	; 0x26d2 <LCD_sendCommand+0xb76>
    26f8:	14 c0       	rjmp	.+40     	; 0x2722 <LCD_sendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26fc:	78 a1       	ldd	r23, Y+32	; 0x20
    26fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2700:	9a a1       	ldd	r25, Y+34	; 0x22
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	9e 8f       	std	Y+30, r25	; 0x1e
    270c:	8d 8f       	std	Y+29, r24	; 0x1d
    270e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2710:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2712:	9a 8f       	std	Y+26, r25	; 0x1a
    2714:	89 8f       	std	Y+25, r24	; 0x19
    2716:	89 8d       	ldd	r24, Y+25	; 0x19
    2718:	9a 8d       	ldd	r25, Y+26	; 0x1a
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_sendCommand+0xbbe>
    271e:	9a 8f       	std	Y+26, r25	; 0x1a
    2720:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_write_Pin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a0 e8       	ldi	r26, 0x80	; 128
    2732:	bf e3       	ldi	r27, 0x3F	; 63
    2734:	8d 8b       	std	Y+21, r24	; 0x15
    2736:	9e 8b       	std	Y+22, r25	; 0x16
    2738:	af 8b       	std	Y+23, r26	; 0x17
    273a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    273c:	6d 89       	ldd	r22, Y+21	; 0x15
    273e:	7e 89       	ldd	r23, Y+22	; 0x16
    2740:	8f 89       	ldd	r24, Y+23	; 0x17
    2742:	98 8d       	ldd	r25, Y+24	; 0x18
    2744:	2b ea       	ldi	r18, 0xAB	; 171
    2746:	3a ea       	ldi	r19, 0xAA	; 170
    2748:	4a ea       	ldi	r20, 0xAA	; 170
    274a:	50 e4       	ldi	r21, 0x40	; 64
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	89 8b       	std	Y+17, r24	; 0x11
    2756:	9a 8b       	std	Y+18, r25	; 0x12
    2758:	ab 8b       	std	Y+19, r26	; 0x13
    275a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    275c:	69 89       	ldd	r22, Y+17	; 0x11
    275e:	7a 89       	ldd	r23, Y+18	; 0x12
    2760:	8b 89       	ldd	r24, Y+19	; 0x13
    2762:	9c 89       	ldd	r25, Y+20	; 0x14
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	1c f4       	brge	.+6      	; 0x277a <LCD_sendCommand+0xc1e>
		__ticks = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	88 8b       	std	Y+16, r24	; 0x10
    2778:	91 c0       	rjmp	.+290    	; 0x289c <LCD_sendCommand+0xd40>
	else if (__tmp > 255)
    277a:	69 89       	ldd	r22, Y+17	; 0x11
    277c:	7a 89       	ldd	r23, Y+18	; 0x12
    277e:	8b 89       	ldd	r24, Y+19	; 0x13
    2780:	9c 89       	ldd	r25, Y+20	; 0x14
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4f e7       	ldi	r20, 0x7F	; 127
    2788:	53 e4       	ldi	r21, 0x43	; 67
    278a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    278e:	18 16       	cp	r1, r24
    2790:	0c f0       	brlt	.+2      	; 0x2794 <LCD_sendCommand+0xc38>
    2792:	7b c0       	rjmp	.+246    	; 0x288a <LCD_sendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    2794:	6d 89       	ldd	r22, Y+21	; 0x15
    2796:	7e 89       	ldd	r23, Y+22	; 0x16
    2798:	8f 89       	ldd	r24, Y+23	; 0x17
    279a:	98 8d       	ldd	r25, Y+24	; 0x18
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	4a e7       	ldi	r20, 0x7A	; 122
    27a2:	54 e4       	ldi	r21, 0x44	; 68
    27a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8c 87       	std	Y+12, r24	; 0x0c
    27ae:	9d 87       	std	Y+13, r25	; 0x0d
    27b0:	ae 87       	std	Y+14, r26	; 0x0e
    27b2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    27b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    27b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	4a e7       	ldi	r20, 0x7A	; 122
    27c2:	55 e4       	ldi	r21, 0x45	; 69
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	88 87       	std	Y+8, r24	; 0x08
    27ce:	99 87       	std	Y+9, r25	; 0x09
    27d0:	aa 87       	std	Y+10, r26	; 0x0a
    27d2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27d4:	68 85       	ldd	r22, Y+8	; 0x08
    27d6:	79 85       	ldd	r23, Y+9	; 0x09
    27d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27da:	9b 85       	ldd	r25, Y+11	; 0x0b
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e8       	ldi	r20, 0x80	; 128
    27e2:	5f e3       	ldi	r21, 0x3F	; 63
    27e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27e8:	88 23       	and	r24, r24
    27ea:	2c f4       	brge	.+10     	; 0x27f6 <LCD_sendCommand+0xc9a>
		__ticks = 1;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9f 83       	std	Y+7, r25	; 0x07
    27f2:	8e 83       	std	Y+6, r24	; 0x06
    27f4:	3f c0       	rjmp	.+126    	; 0x2874 <LCD_sendCommand+0xd18>
	else if (__tmp > 65535)
    27f6:	68 85       	ldd	r22, Y+8	; 0x08
    27f8:	79 85       	ldd	r23, Y+9	; 0x09
    27fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    27fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	3f ef       	ldi	r19, 0xFF	; 255
    2802:	4f e7       	ldi	r20, 0x7F	; 127
    2804:	57 e4       	ldi	r21, 0x47	; 71
    2806:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280a:	18 16       	cp	r1, r24
    280c:	4c f5       	brge	.+82     	; 0x2860 <LCD_sendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2810:	7d 85       	ldd	r23, Y+13	; 0x0d
    2812:	8e 85       	ldd	r24, Y+14	; 0x0e
    2814:	9f 85       	ldd	r25, Y+15	; 0x0f
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e2       	ldi	r20, 0x20	; 32
    281c:	51 e4       	ldi	r21, 0x41	; 65
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9f 83       	std	Y+7, r25	; 0x07
    2834:	8e 83       	std	Y+6, r24	; 0x06
    2836:	0f c0       	rjmp	.+30     	; 0x2856 <LCD_sendCommand+0xcfa>
    2838:	80 e9       	ldi	r24, 0x90	; 144
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	9d 83       	std	Y+5, r25	; 0x05
    283e:	8c 83       	std	Y+4, r24	; 0x04
    2840:	8c 81       	ldd	r24, Y+4	; 0x04
    2842:	9d 81       	ldd	r25, Y+5	; 0x05
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_sendCommand+0xce8>
    2848:	9d 83       	std	Y+5, r25	; 0x05
    284a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284c:	8e 81       	ldd	r24, Y+6	; 0x06
    284e:	9f 81       	ldd	r25, Y+7	; 0x07
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	9f 83       	std	Y+7, r25	; 0x07
    2854:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2856:	8e 81       	ldd	r24, Y+6	; 0x06
    2858:	9f 81       	ldd	r25, Y+7	; 0x07
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	69 f7       	brne	.-38     	; 0x2838 <LCD_sendCommand+0xcdc>
    285e:	24 c0       	rjmp	.+72     	; 0x28a8 <LCD_sendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2860:	68 85       	ldd	r22, Y+8	; 0x08
    2862:	79 85       	ldd	r23, Y+9	; 0x09
    2864:	8a 85       	ldd	r24, Y+10	; 0x0a
    2866:	9b 85       	ldd	r25, Y+11	; 0x0b
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9f 83       	std	Y+7, r25	; 0x07
    2872:	8e 83       	std	Y+6, r24	; 0x06
    2874:	8e 81       	ldd	r24, Y+6	; 0x06
    2876:	9f 81       	ldd	r25, Y+7	; 0x07
    2878:	9b 83       	std	Y+3, r25	; 0x03
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	9b 81       	ldd	r25, Y+3	; 0x03
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_sendCommand+0xd24>
    2884:	9b 83       	std	Y+3, r25	; 0x03
    2886:	8a 83       	std	Y+2, r24	; 0x02
    2888:	0f c0       	rjmp	.+30     	; 0x28a8 <LCD_sendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    288a:	69 89       	ldd	r22, Y+17	; 0x11
    288c:	7a 89       	ldd	r23, Y+18	; 0x12
    288e:	8b 89       	ldd	r24, Y+19	; 0x13
    2890:	9c 89       	ldd	r25, Y+20	; 0x14
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	88 8b       	std	Y+16, r24	; 0x10
    289c:	88 89       	ldd	r24, Y+16	; 0x10
    289e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	8a 95       	dec	r24
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <LCD_sendCommand+0xd46>
    28a6:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    28a8:	cb 56       	subi	r28, 0x6B	; 107
    28aa:	df 4f       	sbci	r29, 0xFF	; 255
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	08 95       	ret

000028c0 <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	c1 58       	subi	r28, 0x81	; 129
    28ce:	d0 40       	sbci	r29, 0x00	; 0
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	fe 01       	movw	r30, r28
    28dc:	ef 57       	subi	r30, 0x7F	; 127
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_write_Pin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,HIGH);
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	61 e0       	ldi	r22, 0x01	; 1
    28e6:	41 e0       	ldi	r20, 0x01	; 1
    28e8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    28ec:	fe 01       	movw	r30, r28
    28ee:	e3 58       	subi	r30, 0x83	; 131
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e8       	ldi	r26, 0x80	; 128
    28f8:	bf e3       	ldi	r27, 0x3F	; 63
    28fa:	80 83       	st	Z, r24
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	a2 83       	std	Z+2, r26	; 0x02
    2900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2902:	8e 01       	movw	r16, r28
    2904:	07 58       	subi	r16, 0x87	; 135
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	fe 01       	movw	r30, r28
    290a:	e3 58       	subi	r30, 0x83	; 131
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	60 81       	ld	r22, Z
    2910:	71 81       	ldd	r23, Z+1	; 0x01
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a e7       	ldi	r20, 0x7A	; 122
    291c:	55 e4       	ldi	r21, 0x45	; 69
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	f8 01       	movw	r30, r16
    2928:	80 83       	st	Z, r24
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	a2 83       	std	Z+2, r26	; 0x02
    292e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2930:	fe 01       	movw	r30, r28
    2932:	e7 58       	subi	r30, 0x87	; 135
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e8       	ldi	r20, 0x80	; 128
    2944:	5f e3       	ldi	r21, 0x3F	; 63
    2946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    294a:	88 23       	and	r24, r24
    294c:	44 f4       	brge	.+16     	; 0x295e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    294e:	fe 01       	movw	r30, r28
    2950:	e9 58       	subi	r30, 0x89	; 137
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
    295c:	64 c0       	rjmp	.+200    	; 0x2a26 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    295e:	fe 01       	movw	r30, r28
    2960:	e7 58       	subi	r30, 0x87	; 135
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	4f e7       	ldi	r20, 0x7F	; 127
    2972:	57 e4       	ldi	r21, 0x47	; 71
    2974:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2978:	18 16       	cp	r1, r24
    297a:	0c f0       	brlt	.+2      	; 0x297e <LCD_displayCharacter+0xbe>
    297c:	43 c0       	rjmp	.+134    	; 0x2a04 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297e:	fe 01       	movw	r30, r28
    2980:	e3 58       	subi	r30, 0x83	; 131
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8e 01       	movw	r16, r28
    299e:	09 58       	subi	r16, 0x89	; 137
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	f8 01       	movw	r30, r16
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
    29b4:	1f c0       	rjmp	.+62     	; 0x29f4 <LCD_displayCharacter+0x134>
    29b6:	fe 01       	movw	r30, r28
    29b8:	eb 58       	subi	r30, 0x8B	; 139
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 e9       	ldi	r24, 0x90	; 144
    29be:	91 e0       	ldi	r25, 0x01	; 1
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29c4:	fe 01       	movw	r30, r28
    29c6:	eb 58       	subi	r30, 0x8B	; 139
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	80 81       	ld	r24, Z
    29cc:	91 81       	ldd	r25, Z+1	; 0x01
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <LCD_displayCharacter+0x10e>
    29d2:	fe 01       	movw	r30, r28
    29d4:	eb 58       	subi	r30, 0x8B	; 139
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	de 01       	movw	r26, r28
    29de:	a9 58       	subi	r26, 0x89	; 137
    29e0:	bf 4f       	sbci	r27, 0xFF	; 255
    29e2:	fe 01       	movw	r30, r28
    29e4:	e9 58       	subi	r30, 0x89	; 137
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	11 96       	adiw	r26, 0x01	; 1
    29f0:	9c 93       	st	X, r25
    29f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f4:	fe 01       	movw	r30, r28
    29f6:	e9 58       	subi	r30, 0x89	; 137
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	91 81       	ldd	r25, Z+1	; 0x01
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	d1 f6       	brne	.-76     	; 0x29b6 <LCD_displayCharacter+0xf6>
    2a02:	27 c0       	rjmp	.+78     	; 0x2a52 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	8e 01       	movw	r16, r28
    2a06:	09 58       	subi	r16, 0x89	; 137
    2a08:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e7 58       	subi	r30, 0x87	; 135
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	f8 01       	movw	r30, r16
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
    2a26:	de 01       	movw	r26, r28
    2a28:	ad 58       	subi	r26, 0x8D	; 141
    2a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e9 58       	subi	r30, 0x89	; 137
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	91 81       	ldd	r25, Z+1	; 0x01
    2a36:	8d 93       	st	X+, r24
    2a38:	9c 93       	st	X, r25
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	ed 58       	subi	r30, 0x8D	; 141
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <LCD_displayCharacter+0x184>
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ed 58       	subi	r30, 0x8D	; 141
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_write_Pin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	62 e0       	ldi	r22, 0x02	; 2
    2a56:	41 e0       	ldi	r20, 0x01	; 1
    2a58:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e1 59       	subi	r30, 0x91	; 145
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a0 e8       	ldi	r26, 0x80	; 128
    2a68:	bf e3       	ldi	r27, 0x3F	; 63
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	a2 83       	std	Z+2, r26	; 0x02
    2a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	8e 01       	movw	r16, r28
    2a74:	05 59       	subi	r16, 0x95	; 149
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e1 59       	subi	r30, 0x91	; 145
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a e7       	ldi	r20, 0x7A	; 122
    2a8c:	55 e4       	ldi	r21, 0x45	; 69
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	f8 01       	movw	r30, r16
    2a98:	80 83       	st	Z, r24
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	a2 83       	std	Z+2, r26	; 0x02
    2a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e5 59       	subi	r30, 0x95	; 149
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	44 f4       	brge	.+16     	; 0x2ace <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e7 59       	subi	r30, 0x97	; 151
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	64 c0       	rjmp	.+200    	; 0x2b96 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e5 59       	subi	r30, 0x95	; 149
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	0c f0       	brlt	.+2      	; 0x2aee <LCD_displayCharacter+0x22e>
    2aec:	43 c0       	rjmp	.+134    	; 0x2b74 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aee:	fe 01       	movw	r30, r28
    2af0:	e1 59       	subi	r30, 0x91	; 145
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	8e 01       	movw	r16, r28
    2b0e:	07 59       	subi	r16, 0x97	; 151
    2b10:	1f 4f       	sbci	r17, 0xFF	; 255
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	f8 01       	movw	r30, r16
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	1f c0       	rjmp	.+62     	; 0x2b64 <LCD_displayCharacter+0x2a4>
    2b26:	fe 01       	movw	r30, r28
    2b28:	e9 59       	subi	r30, 0x99	; 153
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	80 e9       	ldi	r24, 0x90	; 144
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
    2b34:	fe 01       	movw	r30, r28
    2b36:	e9 59       	subi	r30, 0x99	; 153
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_displayCharacter+0x27e>
    2b42:	fe 01       	movw	r30, r28
    2b44:	e9 59       	subi	r30, 0x99	; 153
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4c:	de 01       	movw	r26, r28
    2b4e:	a7 59       	subi	r26, 0x97	; 151
    2b50:	bf 4f       	sbci	r27, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	e7 59       	subi	r30, 0x97	; 151
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	11 96       	adiw	r26, 0x01	; 1
    2b60:	9c 93       	st	X, r25
    2b62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b64:	fe 01       	movw	r30, r28
    2b66:	e7 59       	subi	r30, 0x97	; 151
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	d1 f6       	brne	.-76     	; 0x2b26 <LCD_displayCharacter+0x266>
    2b72:	27 c0       	rjmp	.+78     	; 0x2bc2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b74:	8e 01       	movw	r16, r28
    2b76:	07 59       	subi	r16, 0x97	; 151
    2b78:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e5 59       	subi	r30, 0x95	; 149
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	f8 01       	movw	r30, r16
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
    2b96:	de 01       	movw	r26, r28
    2b98:	ab 59       	subi	r26, 0x9B	; 155
    2b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e7 59       	subi	r30, 0x97	; 151
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	8d 93       	st	X+, r24
    2ba8:	9c 93       	st	X, r25
    2baa:	fe 01       	movw	r30, r28
    2bac:	eb 59       	subi	r30, 0x9B	; 155
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <LCD_displayCharacter+0x2f4>
    2bb8:	fe 01       	movw	r30, r28
    2bba:	eb 59       	subi	r30, 0x9B	; 155
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	80 83       	st	Z, r24
	_delay_us(1);

#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,4));
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ef 57       	subi	r30, 0x7F	; 127
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	82 95       	swap	r24
    2bcc:	8f 70       	andi	r24, 0x0F	; 15
    2bce:	98 2f       	mov	r25, r24
    2bd0:	91 70       	andi	r25, 0x01	; 1
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	63 e0       	ldi	r22, 0x03	; 3
    2bd6:	49 2f       	mov	r20, r25
    2bd8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,5));
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ef 57       	subi	r30, 0x7F	; 127
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	82 95       	swap	r24
    2be6:	86 95       	lsr	r24
    2be8:	87 70       	andi	r24, 0x07	; 7
    2bea:	98 2f       	mov	r25, r24
    2bec:	91 70       	andi	r25, 0x01	; 1
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	64 e0       	ldi	r22, 0x04	; 4
    2bf2:	49 2f       	mov	r20, r25
    2bf4:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,6));
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ef 57       	subi	r30, 0x7F	; 127
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 81       	ld	r24, Z
    2c00:	82 95       	swap	r24
    2c02:	86 95       	lsr	r24
    2c04:	86 95       	lsr	r24
    2c06:	83 70       	andi	r24, 0x03	; 3
    2c08:	98 2f       	mov	r25, r24
    2c0a:	91 70       	andi	r25, 0x01	; 1
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	65 e0       	ldi	r22, 0x05	; 5
    2c10:	49 2f       	mov	r20, r25
    2c12:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,7));
    2c16:	fe 01       	movw	r30, r28
    2c18:	ef 57       	subi	r30, 0x7F	; 127
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	98 2f       	mov	r25, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	99 27       	eor	r25, r25
    2c24:	99 1f       	adc	r25, r25
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	66 e0       	ldi	r22, 0x06	; 6
    2c2a:	49 2f       	mov	r20, r25
    2c2c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    2c30:	fe 01       	movw	r30, r28
    2c32:	ef 59       	subi	r30, 0x9F	; 159
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 e8       	ldi	r26, 0x80	; 128
    2c3c:	bf e3       	ldi	r27, 0x3F	; 63
    2c3e:	80 83       	st	Z, r24
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	a2 83       	std	Z+2, r26	; 0x02
    2c44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	8e 01       	movw	r16, r28
    2c48:	03 5a       	subi	r16, 0xA3	; 163
    2c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ef 59       	subi	r30, 0x9F	; 159
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	60 81       	ld	r22, Z
    2c54:	71 81       	ldd	r23, Z+1	; 0x01
    2c56:	82 81       	ldd	r24, Z+2	; 0x02
    2c58:	93 81       	ldd	r25, Z+3	; 0x03
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4a e7       	ldi	r20, 0x7A	; 122
    2c60:	55 e4       	ldi	r21, 0x45	; 69
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	f8 01       	movw	r30, r16
    2c6c:	80 83       	st	Z, r24
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	a2 83       	std	Z+2, r26	; 0x02
    2c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c74:	fe 01       	movw	r30, r28
    2c76:	e3 5a       	subi	r30, 0xA3	; 163
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	44 f4       	brge	.+16     	; 0x2ca2 <LCD_displayCharacter+0x3e2>
		__ticks = 1;
    2c92:	fe 01       	movw	r30, r28
    2c94:	e5 5a       	subi	r30, 0xA5	; 165
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
    2ca0:	64 c0       	rjmp	.+200    	; 0x2d6a <LCD_displayCharacter+0x4aa>
	else if (__tmp > 65535)
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e3 5a       	subi	r30, 0xA3	; 163
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	60 81       	ld	r22, Z
    2caa:	71 81       	ldd	r23, Z+1	; 0x01
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	93 81       	ldd	r25, Z+3	; 0x03
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	3f ef       	ldi	r19, 0xFF	; 255
    2cb4:	4f e7       	ldi	r20, 0x7F	; 127
    2cb6:	57 e4       	ldi	r21, 0x47	; 71
    2cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	0c f0       	brlt	.+2      	; 0x2cc2 <LCD_displayCharacter+0x402>
    2cc0:	43 c0       	rjmp	.+134    	; 0x2d48 <LCD_displayCharacter+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ef 59       	subi	r30, 0x9F	; 159
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	8e 01       	movw	r16, r28
    2ce2:	05 5a       	subi	r16, 0xA5	; 165
    2ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	f8 01       	movw	r30, r16
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	80 83       	st	Z, r24
    2cf8:	1f c0       	rjmp	.+62     	; 0x2d38 <LCD_displayCharacter+0x478>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e7 5a       	subi	r30, 0xA7	; 167
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 e9       	ldi	r24, 0x90	; 144
    2d02:	91 e0       	ldi	r25, 0x01	; 1
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e7 5a       	subi	r30, 0xA7	; 167
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <LCD_displayCharacter+0x452>
    2d16:	fe 01       	movw	r30, r28
    2d18:	e7 5a       	subi	r30, 0xA7	; 167
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	de 01       	movw	r26, r28
    2d22:	a5 5a       	subi	r26, 0xA5	; 165
    2d24:	bf 4f       	sbci	r27, 0xFF	; 255
    2d26:	fe 01       	movw	r30, r28
    2d28:	e5 5a       	subi	r30, 0xA5	; 165
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	11 96       	adiw	r26, 0x01	; 1
    2d34:	9c 93       	st	X, r25
    2d36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e5 5a       	subi	r30, 0xA5	; 165
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	d1 f6       	brne	.-76     	; 0x2cfa <LCD_displayCharacter+0x43a>
    2d46:	27 c0       	rjmp	.+78     	; 0x2d96 <LCD_displayCharacter+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	8e 01       	movw	r16, r28
    2d4a:	05 5a       	subi	r16, 0xA5	; 165
    2d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e3 5a       	subi	r30, 0xA3	; 163
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	60 81       	ld	r22, Z
    2d56:	71 81       	ldd	r23, Z+1	; 0x01
    2d58:	82 81       	ldd	r24, Z+2	; 0x02
    2d5a:	93 81       	ldd	r25, Z+3	; 0x03
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	f8 01       	movw	r30, r16
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	80 83       	st	Z, r24
    2d6a:	de 01       	movw	r26, r28
    2d6c:	a9 5a       	subi	r26, 0xA9	; 169
    2d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d70:	fe 01       	movw	r30, r28
    2d72:	e5 5a       	subi	r30, 0xA5	; 165
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	8d 93       	st	X+, r24
    2d7c:	9c 93       	st	X, r25
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e9 5a       	subi	r30, 0xA9	; 169
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <LCD_displayCharacter+0x4c8>
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e9 5a       	subi	r30, 0xA9	; 169
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_write_Pin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	62 e0       	ldi	r22, 0x02	; 2
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    2da0:	fe 01       	movw	r30, r28
    2da2:	ed 5a       	subi	r30, 0xAD	; 173
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	a0 e8       	ldi	r26, 0x80	; 128
    2dac:	bf e3       	ldi	r27, 0x3F	; 63
    2dae:	80 83       	st	Z, r24
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	a2 83       	std	Z+2, r26	; 0x02
    2db4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2db6:	8e 01       	movw	r16, r28
    2db8:	01 5b       	subi	r16, 0xB1	; 177
    2dba:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ed 5a       	subi	r30, 0xAD	; 173
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	60 81       	ld	r22, Z
    2dc4:	71 81       	ldd	r23, Z+1	; 0x01
    2dc6:	82 81       	ldd	r24, Z+2	; 0x02
    2dc8:	93 81       	ldd	r25, Z+3	; 0x03
    2dca:	2b ea       	ldi	r18, 0xAB	; 171
    2dcc:	3a ea       	ldi	r19, 0xAA	; 170
    2dce:	4a ea       	ldi	r20, 0xAA	; 170
    2dd0:	50 e4       	ldi	r21, 0x40	; 64
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	f8 01       	movw	r30, r16
    2ddc:	80 83       	st	Z, r24
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	a2 83       	std	Z+2, r26	; 0x02
    2de2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2de4:	fe 01       	movw	r30, r28
    2de6:	e1 5b       	subi	r30, 0xB1	; 177
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	93 81       	ldd	r25, Z+3	; 0x03
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e8       	ldi	r20, 0x80	; 128
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dfe:	88 23       	and	r24, r24
    2e00:	34 f4       	brge	.+12     	; 0x2e0e <LCD_displayCharacter+0x54e>
		__ticks = 1;
    2e02:	fe 01       	movw	r30, r28
    2e04:	e2 5b       	subi	r30, 0xB2	; 178
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	80 83       	st	Z, r24
    2e0c:	e0 c0       	rjmp	.+448    	; 0x2fce <LCD_displayCharacter+0x70e>
	else if (__tmp > 255)
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e1 5b       	subi	r30, 0xB1	; 177
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	4f e7       	ldi	r20, 0x7F	; 127
    2e22:	53 e4       	ldi	r21, 0x43	; 67
    2e24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e28:	18 16       	cp	r1, r24
    2e2a:	0c f0       	brlt	.+2      	; 0x2e2e <LCD_displayCharacter+0x56e>
    2e2c:	c0 c0       	rjmp	.+384    	; 0x2fae <LCD_displayCharacter+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ed 5a       	subi	r30, 0xAD	; 173
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	60 81       	ld	r22, Z
    2e36:	71 81       	ldd	r23, Z+1	; 0x01
    2e38:	82 81       	ldd	r24, Z+2	; 0x02
    2e3a:	93 81       	ldd	r25, Z+3	; 0x03
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	4a e7       	ldi	r20, 0x7A	; 122
    2e42:	54 e4       	ldi	r21, 0x44	; 68
    2e44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e6 5b       	subi	r30, 0xB6	; 182
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 83       	st	Z, r24
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	a2 83       	std	Z+2, r26	; 0x02
    2e58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5a:	8e 01       	movw	r16, r28
    2e5c:	0a 5b       	subi	r16, 0xBA	; 186
    2e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e60:	fe 01       	movw	r30, r28
    2e62:	e6 5b       	subi	r30, 0xB6	; 182
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	4a e7       	ldi	r20, 0x7A	; 122
    2e74:	55 e4       	ldi	r21, 0x45	; 69
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	f8 01       	movw	r30, r16
    2e80:	80 83       	st	Z, r24
    2e82:	91 83       	std	Z+1, r25	; 0x01
    2e84:	a2 83       	std	Z+2, r26	; 0x02
    2e86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	ea 5b       	subi	r30, 0xBA	; 186
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	60 81       	ld	r22, Z
    2e90:	71 81       	ldd	r23, Z+1	; 0x01
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	93 81       	ldd	r25, Z+3	; 0x03
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e8       	ldi	r20, 0x80	; 128
    2e9c:	5f e3       	ldi	r21, 0x3F	; 63
    2e9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea2:	88 23       	and	r24, r24
    2ea4:	44 f4       	brge	.+16     	; 0x2eb6 <LCD_displayCharacter+0x5f6>
		__ticks = 1;
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ec 5b       	subi	r30, 0xBC	; 188
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	80 83       	st	Z, r24
    2eb4:	64 c0       	rjmp	.+200    	; 0x2f7e <LCD_displayCharacter+0x6be>
	else if (__tmp > 65535)
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	ea 5b       	subi	r30, 0xBA	; 186
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	60 81       	ld	r22, Z
    2ebe:	71 81       	ldd	r23, Z+1	; 0x01
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	93 81       	ldd	r25, Z+3	; 0x03
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	3f ef       	ldi	r19, 0xFF	; 255
    2ec8:	4f e7       	ldi	r20, 0x7F	; 127
    2eca:	57 e4       	ldi	r21, 0x47	; 71
    2ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed0:	18 16       	cp	r1, r24
    2ed2:	0c f0       	brlt	.+2      	; 0x2ed6 <LCD_displayCharacter+0x616>
    2ed4:	43 c0       	rjmp	.+134    	; 0x2f5c <LCD_displayCharacter+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e6 5b       	subi	r30, 0xB6	; 182
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e2       	ldi	r20, 0x20	; 32
    2eea:	51 e4       	ldi	r21, 0x41	; 65
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	8e 01       	movw	r16, r28
    2ef6:	0c 5b       	subi	r16, 0xBC	; 188
    2ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	f8 01       	movw	r30, r16
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	1f c0       	rjmp	.+62     	; 0x2f4c <LCD_displayCharacter+0x68c>
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ee 5b       	subi	r30, 0xBE	; 190
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 e9       	ldi	r24, 0x90	; 144
    2f16:	91 e0       	ldi	r25, 0x01	; 1
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ee 5b       	subi	r30, 0xBE	; 190
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	80 81       	ld	r24, Z
    2f24:	91 81       	ldd	r25, Z+1	; 0x01
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <LCD_displayCharacter+0x666>
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ee 5b       	subi	r30, 0xBE	; 190
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f34:	de 01       	movw	r26, r28
    2f36:	ac 5b       	subi	r26, 0xBC	; 188
    2f38:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ec 5b       	subi	r30, 0xBC	; 188
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 81       	ld	r24, Z
    2f42:	91 81       	ldd	r25, Z+1	; 0x01
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	11 96       	adiw	r26, 0x01	; 1
    2f48:	9c 93       	st	X, r25
    2f4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	ec 5b       	subi	r30, 0xBC	; 188
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	80 81       	ld	r24, Z
    2f54:	91 81       	ldd	r25, Z+1	; 0x01
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	d1 f6       	brne	.-76     	; 0x2f0e <LCD_displayCharacter+0x64e>
    2f5a:	42 c0       	rjmp	.+132    	; 0x2fe0 <LCD_displayCharacter+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5c:	8e 01       	movw	r16, r28
    2f5e:	0c 5b       	subi	r16, 0xBC	; 188
    2f60:	1f 4f       	sbci	r17, 0xFF	; 255
    2f62:	fe 01       	movw	r30, r28
    2f64:	ea 5b       	subi	r30, 0xBA	; 186
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	60 81       	ld	r22, Z
    2f6a:	71 81       	ldd	r23, Z+1	; 0x01
    2f6c:	82 81       	ldd	r24, Z+2	; 0x02
    2f6e:	93 81       	ldd	r25, Z+3	; 0x03
    2f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	f8 01       	movw	r30, r16
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	80 83       	st	Z, r24
    2f7e:	de 01       	movw	r26, r28
    2f80:	a0 5c       	subi	r26, 0xC0	; 192
    2f82:	bf 4f       	sbci	r27, 0xFF	; 255
    2f84:	fe 01       	movw	r30, r28
    2f86:	ec 5b       	subi	r30, 0xBC	; 188
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	91 81       	ldd	r25, Z+1	; 0x01
    2f8e:	11 96       	adiw	r26, 0x01	; 1
    2f90:	9c 93       	st	X, r25
    2f92:	8e 93       	st	-X, r24
    2f94:	fe 01       	movw	r30, r28
    2f96:	e0 5c       	subi	r30, 0xC0	; 192
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 81       	ld	r24, Z
    2f9c:	91 81       	ldd	r25, Z+1	; 0x01
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <LCD_displayCharacter+0x6de>
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e0 5c       	subi	r30, 0xC0	; 192
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	91 83       	std	Z+1, r25	; 0x01
    2faa:	80 83       	st	Z, r24
    2fac:	19 c0       	rjmp	.+50     	; 0x2fe0 <LCD_displayCharacter+0x720>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fae:	8e 01       	movw	r16, r28
    2fb0:	02 5b       	subi	r16, 0xB2	; 178
    2fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e1 5b       	subi	r30, 0xB1	; 177
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	60 81       	ld	r22, Z
    2fbc:	71 81       	ldd	r23, Z+1	; 0x01
    2fbe:	82 81       	ldd	r24, Z+2	; 0x02
    2fc0:	93 81       	ldd	r25, Z+3	; 0x03
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	f8 01       	movw	r30, r16
    2fcc:	80 83       	st	Z, r24
    2fce:	fe 01       	movw	r30, r28
    2fd0:	e2 5b       	subi	r30, 0xB2	; 178
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	80 81       	ld	r24, Z
    2fd6:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fd8:	8f ad       	ldd	r24, Y+63	; 0x3f
    2fda:	8a 95       	dec	r24
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <LCD_displayCharacter+0x71a>
    2fde:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_write_Pin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	62 e0       	ldi	r22, 0x02	; 2
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e8       	ldi	r26, 0x80	; 128
    2ff0:	bf e3       	ldi	r27, 0x3F	; 63
    2ff2:	8b af       	std	Y+59, r24	; 0x3b
    2ff4:	9c af       	std	Y+60, r25	; 0x3c
    2ff6:	ad af       	std	Y+61, r26	; 0x3d
    2ff8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ffa:	6b ad       	ldd	r22, Y+59	; 0x3b
    2ffc:	7c ad       	ldd	r23, Y+60	; 0x3c
    2ffe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3000:	9e ad       	ldd	r25, Y+62	; 0x3e
    3002:	2b ea       	ldi	r18, 0xAB	; 171
    3004:	3a ea       	ldi	r19, 0xAA	; 170
    3006:	4a ea       	ldi	r20, 0xAA	; 170
    3008:	50 e4       	ldi	r21, 0x40	; 64
    300a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	8f ab       	std	Y+55, r24	; 0x37
    3014:	98 af       	std	Y+56, r25	; 0x38
    3016:	a9 af       	std	Y+57, r26	; 0x39
    3018:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    301a:	6f a9       	ldd	r22, Y+55	; 0x37
    301c:	78 ad       	ldd	r23, Y+56	; 0x38
    301e:	89 ad       	ldd	r24, Y+57	; 0x39
    3020:	9a ad       	ldd	r25, Y+58	; 0x3a
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e8       	ldi	r20, 0x80	; 128
    3028:	5f e3       	ldi	r21, 0x3F	; 63
    302a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    302e:	88 23       	and	r24, r24
    3030:	1c f4       	brge	.+6      	; 0x3038 <LCD_displayCharacter+0x778>
		__ticks = 1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	8e ab       	std	Y+54, r24	; 0x36
    3036:	91 c0       	rjmp	.+290    	; 0x315a <LCD_displayCharacter+0x89a>
	else if (__tmp > 255)
    3038:	6f a9       	ldd	r22, Y+55	; 0x37
    303a:	78 ad       	ldd	r23, Y+56	; 0x38
    303c:	89 ad       	ldd	r24, Y+57	; 0x39
    303e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	4f e7       	ldi	r20, 0x7F	; 127
    3046:	53 e4       	ldi	r21, 0x43	; 67
    3048:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    304c:	18 16       	cp	r1, r24
    304e:	0c f0       	brlt	.+2      	; 0x3052 <LCD_displayCharacter+0x792>
    3050:	7b c0       	rjmp	.+246    	; 0x3148 <LCD_displayCharacter+0x888>
	{
		_delay_ms(__us / 1000.0);
    3052:	6b ad       	ldd	r22, Y+59	; 0x3b
    3054:	7c ad       	ldd	r23, Y+60	; 0x3c
    3056:	8d ad       	ldd	r24, Y+61	; 0x3d
    3058:	9e ad       	ldd	r25, Y+62	; 0x3e
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	4a e7       	ldi	r20, 0x7A	; 122
    3060:	54 e4       	ldi	r21, 0x44	; 68
    3062:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	8a ab       	std	Y+50, r24	; 0x32
    306c:	9b ab       	std	Y+51, r25	; 0x33
    306e:	ac ab       	std	Y+52, r26	; 0x34
    3070:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3072:	6a a9       	ldd	r22, Y+50	; 0x32
    3074:	7b a9       	ldd	r23, Y+51	; 0x33
    3076:	8c a9       	ldd	r24, Y+52	; 0x34
    3078:	9d a9       	ldd	r25, Y+53	; 0x35
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	4a e7       	ldi	r20, 0x7A	; 122
    3080:	55 e4       	ldi	r21, 0x45	; 69
    3082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	8e a7       	std	Y+46, r24	; 0x2e
    308c:	9f a7       	std	Y+47, r25	; 0x2f
    308e:	a8 ab       	std	Y+48, r26	; 0x30
    3090:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3092:	6e a5       	ldd	r22, Y+46	; 0x2e
    3094:	7f a5       	ldd	r23, Y+47	; 0x2f
    3096:	88 a9       	ldd	r24, Y+48	; 0x30
    3098:	99 a9       	ldd	r25, Y+49	; 0x31
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a6:	88 23       	and	r24, r24
    30a8:	2c f4       	brge	.+10     	; 0x30b4 <LCD_displayCharacter+0x7f4>
		__ticks = 1;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	9d a7       	std	Y+45, r25	; 0x2d
    30b0:	8c a7       	std	Y+44, r24	; 0x2c
    30b2:	3f c0       	rjmp	.+126    	; 0x3132 <LCD_displayCharacter+0x872>
	else if (__tmp > 65535)
    30b4:	6e a5       	ldd	r22, Y+46	; 0x2e
    30b6:	7f a5       	ldd	r23, Y+47	; 0x2f
    30b8:	88 a9       	ldd	r24, Y+48	; 0x30
    30ba:	99 a9       	ldd	r25, Y+49	; 0x31
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	3f ef       	ldi	r19, 0xFF	; 255
    30c0:	4f e7       	ldi	r20, 0x7F	; 127
    30c2:	57 e4       	ldi	r21, 0x47	; 71
    30c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c8:	18 16       	cp	r1, r24
    30ca:	4c f5       	brge	.+82     	; 0x311e <LCD_displayCharacter+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30cc:	6a a9       	ldd	r22, Y+50	; 0x32
    30ce:	7b a9       	ldd	r23, Y+51	; 0x33
    30d0:	8c a9       	ldd	r24, Y+52	; 0x34
    30d2:	9d a9       	ldd	r25, Y+53	; 0x35
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e2       	ldi	r20, 0x20	; 32
    30da:	51 e4       	ldi	r21, 0x41	; 65
    30dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	9d a7       	std	Y+45, r25	; 0x2d
    30f2:	8c a7       	std	Y+44, r24	; 0x2c
    30f4:	0f c0       	rjmp	.+30     	; 0x3114 <LCD_displayCharacter+0x854>
    30f6:	80 e9       	ldi	r24, 0x90	; 144
    30f8:	91 e0       	ldi	r25, 0x01	; 1
    30fa:	9b a7       	std	Y+43, r25	; 0x2b
    30fc:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30fe:	8a a5       	ldd	r24, Y+42	; 0x2a
    3100:	9b a5       	ldd	r25, Y+43	; 0x2b
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <LCD_displayCharacter+0x842>
    3106:	9b a7       	std	Y+43, r25	; 0x2b
    3108:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310a:	8c a5       	ldd	r24, Y+44	; 0x2c
    310c:	9d a5       	ldd	r25, Y+45	; 0x2d
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	9d a7       	std	Y+45, r25	; 0x2d
    3112:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3114:	8c a5       	ldd	r24, Y+44	; 0x2c
    3116:	9d a5       	ldd	r25, Y+45	; 0x2d
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	69 f7       	brne	.-38     	; 0x30f6 <LCD_displayCharacter+0x836>
    311c:	24 c0       	rjmp	.+72     	; 0x3166 <LCD_displayCharacter+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3120:	7f a5       	ldd	r23, Y+47	; 0x2f
    3122:	88 a9       	ldd	r24, Y+48	; 0x30
    3124:	99 a9       	ldd	r25, Y+49	; 0x31
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9d a7       	std	Y+45, r25	; 0x2d
    3130:	8c a7       	std	Y+44, r24	; 0x2c
    3132:	8c a5       	ldd	r24, Y+44	; 0x2c
    3134:	9d a5       	ldd	r25, Y+45	; 0x2d
    3136:	99 a7       	std	Y+41, r25	; 0x29
    3138:	88 a7       	std	Y+40, r24	; 0x28
    313a:	88 a5       	ldd	r24, Y+40	; 0x28
    313c:	99 a5       	ldd	r25, Y+41	; 0x29
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	f1 f7       	brne	.-4      	; 0x313e <LCD_displayCharacter+0x87e>
    3142:	99 a7       	std	Y+41, r25	; 0x29
    3144:	88 a7       	std	Y+40, r24	; 0x28
    3146:	0f c0       	rjmp	.+30     	; 0x3166 <LCD_displayCharacter+0x8a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3148:	6f a9       	ldd	r22, Y+55	; 0x37
    314a:	78 ad       	ldd	r23, Y+56	; 0x38
    314c:	89 ad       	ldd	r24, Y+57	; 0x39
    314e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	8e ab       	std	Y+54, r24	; 0x36
    315a:	8e a9       	ldd	r24, Y+54	; 0x36
    315c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    315e:	8f a1       	ldd	r24, Y+39	; 0x27
    3160:	8a 95       	dec	r24
    3162:	f1 f7       	brne	.-4      	; 0x3160 <LCD_displayCharacter+0x8a0>
    3164:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,0));
    3166:	fe 01       	movw	r30, r28
    3168:	ef 57       	subi	r30, 0x7F	; 127
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	80 81       	ld	r24, Z
    316e:	98 2f       	mov	r25, r24
    3170:	91 70       	andi	r25, 0x01	; 1
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	63 e0       	ldi	r22, 0x03	; 3
    3176:	49 2f       	mov	r20, r25
    3178:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,1));
    317c:	fe 01       	movw	r30, r28
    317e:	ef 57       	subi	r30, 0x7F	; 127
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	80 81       	ld	r24, Z
    3184:	86 95       	lsr	r24
    3186:	98 2f       	mov	r25, r24
    3188:	91 70       	andi	r25, 0x01	; 1
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	64 e0       	ldi	r22, 0x04	; 4
    318e:	49 2f       	mov	r20, r25
    3190:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,2));
    3194:	fe 01       	movw	r30, r28
    3196:	ef 57       	subi	r30, 0x7F	; 127
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 81       	ld	r24, Z
    319c:	86 95       	lsr	r24
    319e:	86 95       	lsr	r24
    31a0:	98 2f       	mov	r25, r24
    31a2:	91 70       	andi	r25, 0x01	; 1
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	65 e0       	ldi	r22, 0x05	; 5
    31a8:	49 2f       	mov	r20, r25
    31aa:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
	GPIO_write_Pin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,3));
    31ae:	fe 01       	movw	r30, r28
    31b0:	ef 57       	subi	r30, 0x7F	; 127
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	80 81       	ld	r24, Z
    31b6:	86 95       	lsr	r24
    31b8:	86 95       	lsr	r24
    31ba:	86 95       	lsr	r24
    31bc:	98 2f       	mov	r25, r24
    31be:	91 70       	andi	r25, 0x01	; 1
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	66 e0       	ldi	r22, 0x06	; 6
    31c4:	49 2f       	mov	r20, r25
    31c6:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a0 e8       	ldi	r26, 0x80	; 128
    31d0:	bf e3       	ldi	r27, 0x3F	; 63
    31d2:	8b a3       	std	Y+35, r24	; 0x23
    31d4:	9c a3       	std	Y+36, r25	; 0x24
    31d6:	ad a3       	std	Y+37, r26	; 0x25
    31d8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	6b a1       	ldd	r22, Y+35	; 0x23
    31dc:	7c a1       	ldd	r23, Y+36	; 0x24
    31de:	8d a1       	ldd	r24, Y+37	; 0x25
    31e0:	9e a1       	ldd	r25, Y+38	; 0x26
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4a e7       	ldi	r20, 0x7A	; 122
    31e8:	55 e4       	ldi	r21, 0x45	; 69
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8f 8f       	std	Y+31, r24	; 0x1f
    31f4:	98 a3       	std	Y+32, r25	; 0x20
    31f6:	a9 a3       	std	Y+33, r26	; 0x21
    31f8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    31fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    31fc:	78 a1       	ldd	r23, Y+32	; 0x20
    31fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3200:	9a a1       	ldd	r25, Y+34	; 0x22
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <LCD_displayCharacter+0x95c>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9e 8f       	std	Y+30, r25	; 0x1e
    3218:	8d 8f       	std	Y+29, r24	; 0x1d
    321a:	3f c0       	rjmp	.+126    	; 0x329a <LCD_displayCharacter+0x9da>
	else if (__tmp > 65535)
    321c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    321e:	78 a1       	ldd	r23, Y+32	; 0x20
    3220:	89 a1       	ldd	r24, Y+33	; 0x21
    3222:	9a a1       	ldd	r25, Y+34	; 0x22
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <LCD_displayCharacter+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	6b a1       	ldd	r22, Y+35	; 0x23
    3236:	7c a1       	ldd	r23, Y+36	; 0x24
    3238:	8d a1       	ldd	r24, Y+37	; 0x25
    323a:	9e a1       	ldd	r25, Y+38	; 0x26
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9e 8f       	std	Y+30, r25	; 0x1e
    325a:	8d 8f       	std	Y+29, r24	; 0x1d
    325c:	0f c0       	rjmp	.+30     	; 0x327c <LCD_displayCharacter+0x9bc>
    325e:	80 e9       	ldi	r24, 0x90	; 144
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	9c 8f       	std	Y+28, r25	; 0x1c
    3264:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3266:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3268:	9c 8d       	ldd	r25, Y+28	; 0x1c
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <LCD_displayCharacter+0x9aa>
    326e:	9c 8f       	std	Y+28, r25	; 0x1c
    3270:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3274:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9e 8f       	std	Y+30, r25	; 0x1e
    327a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    327e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <LCD_displayCharacter+0x99e>
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <LCD_displayCharacter+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3288:	78 a1       	ldd	r23, Y+32	; 0x20
    328a:	89 a1       	ldd	r24, Y+33	; 0x21
    328c:	9a a1       	ldd	r25, Y+34	; 0x22
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 8f       	std	Y+30, r25	; 0x1e
    3298:	8d 8f       	std	Y+29, r24	; 0x1d
    329a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    329c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    329e:	9a 8f       	std	Y+26, r25	; 0x1a
    32a0:	89 8f       	std	Y+25, r24	; 0x19
    32a2:	89 8d       	ldd	r24, Y+25	; 0x19
    32a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <LCD_displayCharacter+0x9e6>
    32aa:	9a 8f       	std	Y+26, r25	; 0x1a
    32ac:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_write_Pin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	62 e0       	ldi	r22, 0x02	; 2
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_write_Pin>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a0 e8       	ldi	r26, 0x80	; 128
    32be:	bf e3       	ldi	r27, 0x3F	; 63
    32c0:	8d 8b       	std	Y+21, r24	; 0x15
    32c2:	9e 8b       	std	Y+22, r25	; 0x16
    32c4:	af 8b       	std	Y+23, r26	; 0x17
    32c6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32c8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ca:	7e 89       	ldd	r23, Y+22	; 0x16
    32cc:	8f 89       	ldd	r24, Y+23	; 0x17
    32ce:	98 8d       	ldd	r25, Y+24	; 0x18
    32d0:	2b ea       	ldi	r18, 0xAB	; 171
    32d2:	3a ea       	ldi	r19, 0xAA	; 170
    32d4:	4a ea       	ldi	r20, 0xAA	; 170
    32d6:	50 e4       	ldi	r21, 0x40	; 64
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	89 8b       	std	Y+17, r24	; 0x11
    32e2:	9a 8b       	std	Y+18, r25	; 0x12
    32e4:	ab 8b       	std	Y+19, r26	; 0x13
    32e6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32e8:	69 89       	ldd	r22, Y+17	; 0x11
    32ea:	7a 89       	ldd	r23, Y+18	; 0x12
    32ec:	8b 89       	ldd	r24, Y+19	; 0x13
    32ee:	9c 89       	ldd	r25, Y+20	; 0x14
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e8       	ldi	r20, 0x80	; 128
    32f6:	5f e3       	ldi	r21, 0x3F	; 63
    32f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32fc:	88 23       	and	r24, r24
    32fe:	1c f4       	brge	.+6      	; 0x3306 <LCD_displayCharacter+0xa46>
		__ticks = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	88 8b       	std	Y+16, r24	; 0x10
    3304:	91 c0       	rjmp	.+290    	; 0x3428 <LCD_displayCharacter+0xb68>
	else if (__tmp > 255)
    3306:	69 89       	ldd	r22, Y+17	; 0x11
    3308:	7a 89       	ldd	r23, Y+18	; 0x12
    330a:	8b 89       	ldd	r24, Y+19	; 0x13
    330c:	9c 89       	ldd	r25, Y+20	; 0x14
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	53 e4       	ldi	r21, 0x43	; 67
    3316:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	0c f0       	brlt	.+2      	; 0x3320 <LCD_displayCharacter+0xa60>
    331e:	7b c0       	rjmp	.+246    	; 0x3416 <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    3320:	6d 89       	ldd	r22, Y+21	; 0x15
    3322:	7e 89       	ldd	r23, Y+22	; 0x16
    3324:	8f 89       	ldd	r24, Y+23	; 0x17
    3326:	98 8d       	ldd	r25, Y+24	; 0x18
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	4a e7       	ldi	r20, 0x7A	; 122
    332e:	54 e4       	ldi	r21, 0x44	; 68
    3330:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	8c 87       	std	Y+12, r24	; 0x0c
    333a:	9d 87       	std	Y+13, r25	; 0x0d
    333c:	ae 87       	std	Y+14, r26	; 0x0e
    333e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	6c 85       	ldd	r22, Y+12	; 0x0c
    3342:	7d 85       	ldd	r23, Y+13	; 0x0d
    3344:	8e 85       	ldd	r24, Y+14	; 0x0e
    3346:	9f 85       	ldd	r25, Y+15	; 0x0f
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a e7       	ldi	r20, 0x7A	; 122
    334e:	55 e4       	ldi	r21, 0x45	; 69
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	88 87       	std	Y+8, r24	; 0x08
    335a:	99 87       	std	Y+9, r25	; 0x09
    335c:	aa 87       	std	Y+10, r26	; 0x0a
    335e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3360:	68 85       	ldd	r22, Y+8	; 0x08
    3362:	79 85       	ldd	r23, Y+9	; 0x09
    3364:	8a 85       	ldd	r24, Y+10	; 0x0a
    3366:	9b 85       	ldd	r25, Y+11	; 0x0b
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	2c f4       	brge	.+10     	; 0x3382 <LCD_displayCharacter+0xac2>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9f 83       	std	Y+7, r25	; 0x07
    337e:	8e 83       	std	Y+6, r24	; 0x06
    3380:	3f c0       	rjmp	.+126    	; 0x3400 <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    3382:	68 85       	ldd	r22, Y+8	; 0x08
    3384:	79 85       	ldd	r23, Y+9	; 0x09
    3386:	8a 85       	ldd	r24, Y+10	; 0x0a
    3388:	9b 85       	ldd	r25, Y+11	; 0x0b
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	4c f5       	brge	.+82     	; 0x33ec <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	6c 85       	ldd	r22, Y+12	; 0x0c
    339c:	7d 85       	ldd	r23, Y+13	; 0x0d
    339e:	8e 85       	ldd	r24, Y+14	; 0x0e
    33a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	51 e4       	ldi	r21, 0x41	; 65
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	9f 83       	std	Y+7, r25	; 0x07
    33c0:	8e 83       	std	Y+6, r24	; 0x06
    33c2:	0f c0       	rjmp	.+30     	; 0x33e2 <LCD_displayCharacter+0xb22>
    33c4:	80 e9       	ldi	r24, 0x90	; 144
    33c6:	91 e0       	ldi	r25, 0x01	; 1
    33c8:	9d 83       	std	Y+5, r25	; 0x05
    33ca:	8c 83       	std	Y+4, r24	; 0x04
    33cc:	8c 81       	ldd	r24, Y+4	; 0x04
    33ce:	9d 81       	ldd	r25, Y+5	; 0x05
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <LCD_displayCharacter+0xb10>
    33d4:	9d 83       	std	Y+5, r25	; 0x05
    33d6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	8e 81       	ldd	r24, Y+6	; 0x06
    33da:	9f 81       	ldd	r25, Y+7	; 0x07
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	9f 83       	std	Y+7, r25	; 0x07
    33e0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	8e 81       	ldd	r24, Y+6	; 0x06
    33e4:	9f 81       	ldd	r25, Y+7	; 0x07
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <LCD_displayCharacter+0xb04>
    33ea:	24 c0       	rjmp	.+72     	; 0x3434 <LCD_displayCharacter+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	68 85       	ldd	r22, Y+8	; 0x08
    33ee:	79 85       	ldd	r23, Y+9	; 0x09
    33f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	9f 83       	std	Y+7, r25	; 0x07
    33fe:	8e 83       	std	Y+6, r24	; 0x06
    3400:	8e 81       	ldd	r24, Y+6	; 0x06
    3402:	9f 81       	ldd	r25, Y+7	; 0x07
    3404:	9b 83       	std	Y+3, r25	; 0x03
    3406:	8a 83       	std	Y+2, r24	; 0x02
    3408:	8a 81       	ldd	r24, Y+2	; 0x02
    340a:	9b 81       	ldd	r25, Y+3	; 0x03
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <LCD_displayCharacter+0xb4c>
    3410:	9b 83       	std	Y+3, r25	; 0x03
    3412:	8a 83       	std	Y+2, r24	; 0x02
    3414:	0f c0       	rjmp	.+30     	; 0x3434 <LCD_displayCharacter+0xb74>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3416:	69 89       	ldd	r22, Y+17	; 0x11
    3418:	7a 89       	ldd	r23, Y+18	; 0x12
    341a:	8b 89       	ldd	r24, Y+19	; 0x13
    341c:	9c 89       	ldd	r25, Y+20	; 0x14
    341e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	88 8b       	std	Y+16, r24	; 0x10
    3428:	88 89       	ldd	r24, Y+16	; 0x10
    342a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	8a 95       	dec	r24
    3430:	f1 f7       	brne	.-4      	; 0x342e <LCD_displayCharacter+0xb6e>
    3432:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    3434:	cf 57       	subi	r28, 0x7F	; 127
    3436:	df 4f       	sbci	r29, 0xFF	; 255
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
    3442:	cf 91       	pop	r28
    3444:	df 91       	pop	r29
    3446:	1f 91       	pop	r17
    3448:	0f 91       	pop	r16
    344a:	08 95       	ret

0000344c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	00 d0       	rcall	.+0      	; 0x3452 <LCD_displayString+0x6>
    3452:	0f 92       	push	r0
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	9b 83       	std	Y+3, r25	; 0x03
    345a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    345c:	19 82       	std	Y+1, r1	; 0x01
    345e:	0e c0       	rjmp	.+28     	; 0x347c <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	28 2f       	mov	r18, r24
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	9b 81       	ldd	r25, Y+3	; 0x03
    346a:	fc 01       	movw	r30, r24
    346c:	e2 0f       	add	r30, r18
    346e:	f3 1f       	adc	r31, r19
    3470:	80 81       	ld	r24, Z
    3472:	0e 94 60 14 	call	0x28c0	; 0x28c0 <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	8f 5f       	subi	r24, 0xFF	; 255
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	28 2f       	mov	r18, r24
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	8a 81       	ldd	r24, Y+2	; 0x02
    3484:	9b 81       	ldd	r25, Y+3	; 0x03
    3486:	fc 01       	movw	r30, r24
    3488:	e2 0f       	add	r30, r18
    348a:	f3 1f       	adc	r31, r19
    348c:	80 81       	ld	r24, Z
    348e:	88 23       	and	r24, r24
    3490:	39 f7       	brne	.-50     	; 0x3460 <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	08 95       	ret

0000349e <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	62 97       	sbiw	r28, 0x12	; 18
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	9a 8b       	std	Y+18, r25	; 0x12
    34b4:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    34b6:	89 89       	ldd	r24, Y+17	; 0x11
    34b8:	9a 89       	ldd	r25, Y+18	; 0x12
    34ba:	9e 01       	movw	r18, r28
    34bc:	2f 5f       	subi	r18, 0xFF	; 255
    34be:	3f 4f       	sbci	r19, 0xFF	; 255
    34c0:	b9 01       	movw	r22, r18
    34c2:	4a e0       	ldi	r20, 0x0A	; 10
    34c4:	50 e0       	ldi	r21, 0x00	; 0
    34c6:	0e 94 17 1b 	call	0x362e	; 0x362e <itoa>

   LCD_displayString(arr);
    34ca:	ce 01       	movw	r24, r28
    34cc:	01 96       	adiw	r24, 0x01	; 1
    34ce:	0e 94 26 1a 	call	0x344c	; 0x344c <LCD_displayString>
}
    34d2:	62 96       	adiw	r28, 0x12	; 18
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
    34de:	cf 91       	pop	r28
    34e0:	df 91       	pop	r29
    34e2:	08 95       	ret

000034e4 <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    34e4:	df 93       	push	r29
    34e6:	cf 93       	push	r28
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <LCD_moveCursor+0x6>
    34ea:	00 d0       	rcall	.+0      	; 0x34ec <LCD_moveCursor+0x8>
    34ec:	0f 92       	push	r0
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	8a 83       	std	Y+2, r24	; 0x02
    34f4:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	28 2f       	mov	r18, r24
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	3d 83       	std	Y+5, r19	; 0x05
    34fe:	2c 83       	std	Y+4, r18	; 0x04
    3500:	8c 81       	ldd	r24, Y+4	; 0x04
    3502:	9d 81       	ldd	r25, Y+5	; 0x05
    3504:	81 30       	cpi	r24, 0x01	; 1
    3506:	91 05       	cpc	r25, r1
    3508:	c1 f0       	breq	.+48     	; 0x353a <LCD_moveCursor+0x56>
    350a:	2c 81       	ldd	r18, Y+4	; 0x04
    350c:	3d 81       	ldd	r19, Y+5	; 0x05
    350e:	22 30       	cpi	r18, 0x02	; 2
    3510:	31 05       	cpc	r19, r1
    3512:	2c f4       	brge	.+10     	; 0x351e <LCD_moveCursor+0x3a>
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
    3516:	9d 81       	ldd	r25, Y+5	; 0x05
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	61 f0       	breq	.+24     	; 0x3534 <LCD_moveCursor+0x50>
    351c:	19 c0       	rjmp	.+50     	; 0x3550 <LCD_moveCursor+0x6c>
    351e:	2c 81       	ldd	r18, Y+4	; 0x04
    3520:	3d 81       	ldd	r19, Y+5	; 0x05
    3522:	22 30       	cpi	r18, 0x02	; 2
    3524:	31 05       	cpc	r19, r1
    3526:	69 f0       	breq	.+26     	; 0x3542 <LCD_moveCursor+0x5e>
    3528:	8c 81       	ldd	r24, Y+4	; 0x04
    352a:	9d 81       	ldd	r25, Y+5	; 0x05
    352c:	83 30       	cpi	r24, 0x03	; 3
    352e:	91 05       	cpc	r25, r1
    3530:	61 f0       	breq	.+24     	; 0x354a <LCD_moveCursor+0x66>
    3532:	0e c0       	rjmp	.+28     	; 0x3550 <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	89 83       	std	Y+1, r24	; 0x01
    3538:	0b c0       	rjmp	.+22     	; 0x3550 <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	80 5c       	subi	r24, 0xC0	; 192
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	07 c0       	rjmp	.+14     	; 0x3550 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	80 5f       	subi	r24, 0xF0	; 240
    3546:	89 83       	std	Y+1, r24	; 0x01
    3548:	03 c0       	rjmp	.+6      	; 0x3550 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    354a:	8b 81       	ldd	r24, Y+3	; 0x03
    354c:	80 5c       	subi	r24, 0xC0	; 192
    354e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	80 68       	ori	r24, 0x80	; 128
    3554:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <LCD_sendCommand>
}
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	00 d0       	rcall	.+0      	; 0x356e <LCD_displayStringRowColumn+0x6>
    356e:	00 d0       	rcall	.+0      	; 0x3570 <LCD_displayStringRowColumn+0x8>
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	6a 83       	std	Y+2, r22	; 0x02
    3578:	5c 83       	std	Y+4, r21	; 0x04
    357a:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	6a 81       	ldd	r22, Y+2	; 0x02
    3580:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    3584:	8b 81       	ldd	r24, Y+3	; 0x03
    3586:	9c 81       	ldd	r25, Y+4	; 0x04
    3588:	0e 94 26 1a 	call	0x344c	; 0x344c <LCD_displayString>
}
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <LCD_sendCommand>
}
    35a8:	cf 91       	pop	r28
    35aa:	df 91       	pop	r29
    35ac:	08 95       	ret

000035ae <main>:
#include"app.h"
int main(){
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62

	APP_Init();
    35b6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <APP_Init>
	APP_mainScreen();
    35ba:	0e 94 58 06 	call	0xcb0	; 0xcb0 <APP_mainScreen>
    35be:	ff cf       	rjmp	.-2      	; 0x35be <main+0x10>

000035c0 <__prologue_saves__>:
    35c0:	2f 92       	push	r2
    35c2:	3f 92       	push	r3
    35c4:	4f 92       	push	r4
    35c6:	5f 92       	push	r5
    35c8:	6f 92       	push	r6
    35ca:	7f 92       	push	r7
    35cc:	8f 92       	push	r8
    35ce:	9f 92       	push	r9
    35d0:	af 92       	push	r10
    35d2:	bf 92       	push	r11
    35d4:	cf 92       	push	r12
    35d6:	df 92       	push	r13
    35d8:	ef 92       	push	r14
    35da:	ff 92       	push	r15
    35dc:	0f 93       	push	r16
    35de:	1f 93       	push	r17
    35e0:	cf 93       	push	r28
    35e2:	df 93       	push	r29
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
    35e8:	ca 1b       	sub	r28, r26
    35ea:	db 0b       	sbc	r29, r27
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	09 94       	ijmp

000035f8 <__epilogue_restores__>:
    35f8:	2a 88       	ldd	r2, Y+18	; 0x12
    35fa:	39 88       	ldd	r3, Y+17	; 0x11
    35fc:	48 88       	ldd	r4, Y+16	; 0x10
    35fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3600:	6e 84       	ldd	r6, Y+14	; 0x0e
    3602:	7d 84       	ldd	r7, Y+13	; 0x0d
    3604:	8c 84       	ldd	r8, Y+12	; 0x0c
    3606:	9b 84       	ldd	r9, Y+11	; 0x0b
    3608:	aa 84       	ldd	r10, Y+10	; 0x0a
    360a:	b9 84       	ldd	r11, Y+9	; 0x09
    360c:	c8 84       	ldd	r12, Y+8	; 0x08
    360e:	df 80       	ldd	r13, Y+7	; 0x07
    3610:	ee 80       	ldd	r14, Y+6	; 0x06
    3612:	fd 80       	ldd	r15, Y+5	; 0x05
    3614:	0c 81       	ldd	r16, Y+4	; 0x04
    3616:	1b 81       	ldd	r17, Y+3	; 0x03
    3618:	aa 81       	ldd	r26, Y+2	; 0x02
    361a:	b9 81       	ldd	r27, Y+1	; 0x01
    361c:	ce 0f       	add	r28, r30
    361e:	d1 1d       	adc	r29, r1
    3620:	0f b6       	in	r0, 0x3f	; 63
    3622:	f8 94       	cli
    3624:	de bf       	out	0x3e, r29	; 62
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	cd bf       	out	0x3d, r28	; 61
    362a:	ed 01       	movw	r28, r26
    362c:	08 95       	ret

0000362e <itoa>:
    362e:	fb 01       	movw	r30, r22
    3630:	9f 01       	movw	r18, r30
    3632:	e8 94       	clt
    3634:	42 30       	cpi	r20, 0x02	; 2
    3636:	c4 f0       	brlt	.+48     	; 0x3668 <itoa+0x3a>
    3638:	45 32       	cpi	r20, 0x25	; 37
    363a:	b4 f4       	brge	.+44     	; 0x3668 <itoa+0x3a>
    363c:	4a 30       	cpi	r20, 0x0A	; 10
    363e:	29 f4       	brne	.+10     	; 0x364a <itoa+0x1c>
    3640:	97 fb       	bst	r25, 7
    3642:	1e f4       	brtc	.+6      	; 0x364a <itoa+0x1c>
    3644:	90 95       	com	r25
    3646:	81 95       	neg	r24
    3648:	9f 4f       	sbci	r25, 0xFF	; 255
    364a:	64 2f       	mov	r22, r20
    364c:	77 27       	eor	r23, r23
    364e:	0e 94 48 1b 	call	0x3690	; 0x3690 <__udivmodhi4>
    3652:	80 5d       	subi	r24, 0xD0	; 208
    3654:	8a 33       	cpi	r24, 0x3A	; 58
    3656:	0c f0       	brlt	.+2      	; 0x365a <itoa+0x2c>
    3658:	89 5d       	subi	r24, 0xD9	; 217
    365a:	81 93       	st	Z+, r24
    365c:	cb 01       	movw	r24, r22
    365e:	00 97       	sbiw	r24, 0x00	; 0
    3660:	a1 f7       	brne	.-24     	; 0x364a <itoa+0x1c>
    3662:	16 f4       	brtc	.+4      	; 0x3668 <itoa+0x3a>
    3664:	5d e2       	ldi	r21, 0x2D	; 45
    3666:	51 93       	st	Z+, r21
    3668:	10 82       	st	Z, r1
    366a:	c9 01       	movw	r24, r18
    366c:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <strrev>

00003670 <strrev>:
    3670:	dc 01       	movw	r26, r24
    3672:	fc 01       	movw	r30, r24
    3674:	67 2f       	mov	r22, r23
    3676:	71 91       	ld	r23, Z+
    3678:	77 23       	and	r23, r23
    367a:	e1 f7       	brne	.-8      	; 0x3674 <strrev+0x4>
    367c:	32 97       	sbiw	r30, 0x02	; 2
    367e:	04 c0       	rjmp	.+8      	; 0x3688 <strrev+0x18>
    3680:	7c 91       	ld	r23, X
    3682:	6d 93       	st	X+, r22
    3684:	70 83       	st	Z, r23
    3686:	62 91       	ld	r22, -Z
    3688:	ae 17       	cp	r26, r30
    368a:	bf 07       	cpc	r27, r31
    368c:	c8 f3       	brcs	.-14     	; 0x3680 <strrev+0x10>
    368e:	08 95       	ret

00003690 <__udivmodhi4>:
    3690:	aa 1b       	sub	r26, r26
    3692:	bb 1b       	sub	r27, r27
    3694:	51 e1       	ldi	r21, 0x11	; 17
    3696:	07 c0       	rjmp	.+14     	; 0x36a6 <__udivmodhi4_ep>

00003698 <__udivmodhi4_loop>:
    3698:	aa 1f       	adc	r26, r26
    369a:	bb 1f       	adc	r27, r27
    369c:	a6 17       	cp	r26, r22
    369e:	b7 07       	cpc	r27, r23
    36a0:	10 f0       	brcs	.+4      	; 0x36a6 <__udivmodhi4_ep>
    36a2:	a6 1b       	sub	r26, r22
    36a4:	b7 0b       	sbc	r27, r23

000036a6 <__udivmodhi4_ep>:
    36a6:	88 1f       	adc	r24, r24
    36a8:	99 1f       	adc	r25, r25
    36aa:	5a 95       	dec	r21
    36ac:	a9 f7       	brne	.-22     	; 0x3698 <__udivmodhi4_loop>
    36ae:	80 95       	com	r24
    36b0:	90 95       	com	r25
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	08 95       	ret

000036b8 <_exit>:
    36b8:	f8 94       	cli

000036ba <__stop_program>:
    36ba:	ff cf       	rjmp	.-2      	; 0x36ba <__stop_program>
